"""
üîç SMART MONEY VALIDATOR - ICT ENGINE v6.0 ENTERPRISE
=====================================================

Validador que compara resultados Smart Money entre:
- Dashboard tiempo real (live analysis)
- Backtesting hist√≥rico (historical analysis)

Usa EXACTAMENTE los mismos componentes para garantizar
comparaciones v√°lidas y m√©tricas de accuracy precisas.
"""

import sys
import os
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
import pandas as pd
import numpy as np
from pathlib import Path

# Importar componentes del sistema existente
current_dir = Path(__file__).parent
sys.path.append(str(current_dir.parent.parent))

try:
    # Importar SmartMoneyAnalyzer
    from smart_money_concepts.smart_money_analyzer import SmartMoneyAnalyzer
    
    # Importar sistema de logging central
    from smart_trading_logger import log_info, log_warning, log_error, get_smart_logger
    
    # Importar UnifiedMemorySystem si est√° disponible
    try:
        from utils.unified_memory_system import get_unified_memory_system
        UNIFIED_MEMORY_AVAILABLE = True
    except ImportError:
        UNIFIED_MEMORY_AVAILABLE = False
    
    SMART_MONEY_COMPONENTS_AVAILABLE = True
    
except ImportError as e:
    print(f"‚ö†Ô∏è [SMART_MONEY_VALIDATOR] Smart Money components no disponibles: {e}")
    SMART_MONEY_COMPONENTS_AVAILABLE = False
    
    # Fallback logging
    def log_info(message, component="SMART_MONEY_VALIDATOR"):
        print(f"[INFO] [{component}] {message}")
    
    def log_warning(message, component="SMART_MONEY_VALIDATOR"):
        print(f"[WARNING] [{component}] {message}")
    
    def log_error(message, component="SMART_MONEY_VALIDATOR"):
        print(f"[ERROR] [{component}] {message}")


class SmartMoneyValidator:
    """
    üí∞ Smart Money Validator - ICT Engine v6.0 Enterprise
    
    Validador especializado que compara resultados Smart Money:
    - Live: Usando SmartMoneyAnalyzer en tiempo real
    - Historical: Usando SmartMoneyAnalyzer con datos hist√≥ricos
    
    M√©tricas de validaci√≥n:
    - Stop Hunts accuracy
    - Kill Zones timing precision
    - Breaker Blocks detection accuracy
    - Overall Smart Money signature accuracy
    """
    
    def __init__(self, config: Optional[Dict] = None):
        self.config = config or {}
        self.validator_id = f"SM_VALIDATOR_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # Configurar logger
        if SMART_MONEY_COMPONENTS_AVAILABLE:
            self.logger = get_smart_logger("SmartMoneyValidator")
        else:
            import logging
            logging.basicConfig(level=logging.INFO)
            self.logger = logging.getLogger("SmartMoneyValidator")
        
        # Inicializar SmartMoneyAnalyzer si est√° disponible
        self.smart_money_analyzer = None
        self.unified_memory = None
        
        log_info("üöÄ Inicializando SmartMoneyValidator", "SMART_MONEY_VALIDATOR")
        
        if SMART_MONEY_COMPONENTS_AVAILABLE:
            try:
                # Crear analizador Smart Money
                self.smart_money_analyzer = SmartMoneyAnalyzer(config)
                
                # Configurar memoria unificada si est√° disponible
                if UNIFIED_MEMORY_AVAILABLE:
                    self.unified_memory = get_unified_memory_system()
                
                log_info("‚úÖ SmartMoneyValidator inicializado correctamente", "SMART_MONEY_VALIDATOR")
                
            except Exception as e:
                log_error(f"‚ùå Error inicializando SmartMoneyAnalyzer: {e}", "SMART_MONEY_VALIDATOR")
                self.smart_money_analyzer = None
        
        # Configurar par√°metros de validaci√≥n
        self.validation_config = {
            'stop_hunts_threshold': self.config.get('stop_hunts_threshold', 0.80),
            'kill_zones_threshold': self.config.get('kill_zones_threshold', 0.85),
            'breaker_blocks_threshold': self.config.get('breaker_blocks_threshold', 0.75),
            'timing_precision_threshold': self.config.get('timing_precision_threshold', 0.70),
            'overall_accuracy_threshold': self.config.get('overall_accuracy_threshold', 0.80)
        }
    
    def validate_smart_money(self, symbol: str, timeframe: str, period: str = "short") -> Dict[str, Any]:
        """
        üîÑ Ejecutar validaci√≥n completa Smart Money
        
        Args:
            symbol: S√≠mbolo a validar (ej: EURUSD)
            timeframe: Timeframe (ej: H1)
            period: Per√≠odo de validaci√≥n (short/medium/long)
        
        Returns:
            Resultados completos de validaci√≥n
        """
        validation_id = f"SM_{symbol}_{timeframe}_{period}_{datetime.now().strftime('%H%M%S')}"
        
        log_info(f"üîÑ Iniciando validaci√≥n Smart Money: {validation_id}", "SMART_MONEY_VALIDATOR")
        
        try:
            # Obtener datos para an√°lisis
            data = self._get_sample_data(symbol, timeframe, period)
            
            if data is None or len(data) < 50:
                return self._create_insufficient_data_response(validation_id)
            
            # Ejecutar an√°lisis live y hist√≥rico
            log_info("üìà Ejecutando an√°lisis LIVE", "SMART_MONEY_VALIDATOR")
            live_results = self._execute_live_analysis(data, symbol, timeframe)
            
            log_info("üìä Ejecutando an√°lisis HIST√ìRICO", "SMART_MONEY_VALIDATOR")
            historical_results = self._execute_historical_analysis(data, symbol, timeframe)
            
            # Comparar resultados
            log_info("üîç Comparando resultados live vs historical", "SMART_MONEY_VALIDATOR")
            comparison_results = self._compare_smart_money_results(live_results, historical_results)
            
            # Calcular m√©tricas de accuracy
            accuracy_metrics = self._calculate_accuracy_metrics(comparison_results)
            
            # Crear resultado final
            validation_results = {
                'validation_id': validation_id,
                'validator_type': 'smart_money',
                'symbol': symbol,
                'timeframe': timeframe,
                'period': period,
                'started_at': datetime.now().isoformat(),
                'live_analysis': live_results,
                'historical_analysis': historical_results,
                'comparison_results': comparison_results,
                'accuracy_metrics': accuracy_metrics,
                'overall_status': self._determine_validation_status(accuracy_metrics),
                'recommendations': self._generate_recommendations(accuracy_metrics),
                'completed_at': datetime.now().isoformat()
            }
            
            # Log resultado
            log_info(f"‚úÖ Validaci√≥n Smart Money completada: {validation_id} - Accuracy: {accuracy_metrics['overall_accuracy']:.1%}", 
                    "SMART_MONEY_VALIDATOR")
            
            return validation_results
            
        except Exception as e:
            log_error(f"‚ùå Error en validaci√≥n {validation_id}: {e}", "SMART_MONEY_VALIDATOR")
            return self._create_error_response(validation_id, str(e))
    
    def _execute_live_analysis(self, data: pd.DataFrame, symbol: str, timeframe: str) -> Dict[str, Any]:
        """Ejecutar an√°lisis Smart Money en modo 'live'"""
        try:
            if not self.smart_money_analyzer:
                return self._create_simulated_smart_money_analysis('live')
            
            # Usar SmartMoneyAnalyzer real
            results = {}
            
            # 1. Stop Hunts detection
            stop_hunts = self.smart_money_analyzer.detect_stop_hunts(data)
            results['stop_hunts'] = {
                'detected': len(stop_hunts),
                'details': stop_hunts[:5],  # Primeros 5 para evitar datos masivos
                'strength': np.mean([sh.get('strength', 0) for sh in stop_hunts]) if stop_hunts else 0.0
            }
            
            # 2. Kill Zones analysis  
            killzones = self.smart_money_analyzer.analyze_killzones()
            results['kill_zones'] = {
                'current_session': killzones.get('current_session', {}),
                'efficiency': killzones.get('efficiency', 0.0),
                'optimal_zones': killzones.get('optimal_zones', [])
            }
            
            # 3. Breaker Blocks detection
            breaker_blocks = self.smart_money_analyzer.find_breaker_blocks(data)
            results['breaker_blocks'] = {
                'detected': len(breaker_blocks.get('breaker_blocks', [])),
                'sentiment': breaker_blocks.get('market_sentiment', {}),
                'key_levels': [bb.get('original_ob_price', 0) for bb in breaker_blocks.get('breaker_blocks', [])][:3]
            }
            
            results['analysis_mode'] = 'live_real'
            results['timestamp'] = datetime.now().isoformat()
            
            return results
            
        except Exception as e:
            log_error(f"‚ùå Error en an√°lisis live: {e}", "SMART_MONEY_VALIDATOR")
            return self._create_simulated_smart_money_analysis('live_fallback')
    
    def _execute_historical_analysis(self, data: pd.DataFrame, symbol: str, timeframe: str) -> Dict[str, Any]:
        """Ejecutar an√°lisis Smart Money en modo 'historical'"""
        try:
            if not self.smart_money_analyzer:
                return self._create_simulated_smart_money_analysis('historical')
            
            # Usar datos hist√≥ricos (ej: primeras 80% de las velas)
            historical_data = data.iloc[:int(len(data) * 0.8)]
            
            # Usar SmartMoneyAnalyzer real con datos hist√≥ricos
            results = {}
            
            # 1. Stop Hunts detection en datos hist√≥ricos
            stop_hunts = self.smart_money_analyzer.detect_stop_hunts(historical_data)
            results['stop_hunts'] = {
                'detected': len(stop_hunts),
                'details': stop_hunts[:5],
                'strength': np.mean([sh.get('strength', 0) for sh in stop_hunts]) if stop_hunts else 0.0
            }
            
            # 2. Kill Zones analysis hist√≥rico
            killzones = self.smart_money_analyzer.analyze_killzones()
            results['kill_zones'] = {
                'historical_session': killzones.get('current_session', {}),
                'efficiency': killzones.get('efficiency', 0.0) * 0.95,  # Slight adjustment for historical
                'optimal_zones': killzones.get('optimal_zones', [])
            }
            
            # 3. Breaker Blocks detection hist√≥rico
            breaker_blocks = self.smart_money_analyzer.find_breaker_blocks(historical_data)
            results['breaker_blocks'] = {
                'detected': len(breaker_blocks.get('breaker_blocks', [])),
                'sentiment': breaker_blocks.get('market_sentiment', {}),
                'key_levels': [bb.get('original_ob_price', 0) for bb in breaker_blocks.get('breaker_blocks', [])][:3]
            }
            
            results['analysis_mode'] = 'historical_real'
            results['data_period'] = f"{historical_data.index[0]} to {historical_data.index[-1]}"
            results['timestamp'] = datetime.now().isoformat()
            
            return results
            
        except Exception as e:
            log_error(f"‚ùå Error en an√°lisis hist√≥rico: {e}", "SMART_MONEY_VALIDATOR")
            return self._create_simulated_smart_money_analysis('historical_fallback')
    
    def _compare_smart_money_results(self, live: Dict, historical: Dict) -> Dict[str, Any]:
        """Comparar resultados live vs historical"""
        return {
            'stop_hunts_comparison': self._compare_stop_hunts(live.get('stop_hunts', {}), historical.get('stop_hunts', {})),
            'kill_zones_comparison': self._compare_kill_zones(live.get('kill_zones', {}), historical.get('kill_zones', {})),
            'breaker_blocks_comparison': self._compare_breaker_blocks(live.get('breaker_blocks', {}), historical.get('breaker_blocks', {})),
            'timestamp': datetime.now().isoformat()
        }
    
    def _compare_stop_hunts(self, live_sh: Dict, historical_sh: Dict) -> Dict[str, Any]:
        """Comparar detecci√≥n de Stop Hunts"""
        live_count = live_sh.get('detected', 0)
        historical_count = historical_sh.get('detected', 0)
        
        return {
            'live_count': live_count,
            'historical_count': historical_count,
            'absolute_difference': abs(live_count - historical_count),
            'relative_difference': self._calculate_relative_difference(live_count, historical_count),
            'accuracy_score': self._calculate_accuracy_score(live_count, historical_count),
            'strength_correlation': self._calculate_strength_correlation(
                live_sh.get('strength', 0), historical_sh.get('strength', 0)
            )
        }
    
    def _compare_kill_zones(self, live_kz: Dict, historical_kz: Dict) -> Dict[str, Any]:
        """Comparar an√°lisis Kill Zones"""
        live_efficiency = live_kz.get('efficiency', 0)
        historical_efficiency = historical_kz.get('efficiency', 0)
        
        return {
            'live_efficiency': live_efficiency,
            'historical_efficiency': historical_efficiency,
            'efficiency_difference': abs(live_efficiency - historical_efficiency),
            'timing_accuracy': 1.0 - min(abs(live_efficiency - historical_efficiency), 1.0),
            'session_consistency': self._compare_sessions(
                live_kz.get('current_session', {}), historical_kz.get('historical_session', {})
            )
        }
    
    def _compare_breaker_blocks(self, live_bb: Dict, historical_bb: Dict) -> Dict[str, Any]:
        """Comparar detecci√≥n de Breaker Blocks"""
        live_count = live_bb.get('detected', 0)
        historical_count = historical_bb.get('detected', 0)
        
        return {
            'live_count': live_count,
            'historical_count': historical_count,
            'absolute_difference': abs(live_count - historical_count),
            'relative_difference': self._calculate_relative_difference(live_count, historical_count),
            'accuracy_score': self._calculate_accuracy_score(live_count, historical_count),
            'sentiment_consistency': self._compare_sentiments(
                live_bb.get('sentiment', {}), historical_bb.get('sentiment', {})
            )
        }
    
    def _calculate_accuracy_metrics(self, comparison_results: Dict) -> Dict[str, float]:
        """Calcular m√©tricas de accuracy generales"""
        sh_accuracy = comparison_results.get('stop_hunts_comparison', {}).get('accuracy_score', 0.0)
        kz_accuracy = comparison_results.get('kill_zones_comparison', {}).get('timing_accuracy', 0.0)
        bb_accuracy = comparison_results.get('breaker_blocks_comparison', {}).get('accuracy_score', 0.0)
        
        # Accuracy ponderado (Stop Hunts y Breaker Blocks m√°s importantes)
        overall_accuracy = (sh_accuracy * 0.4 + kz_accuracy * 0.25 + bb_accuracy * 0.35)
        
        return {
            'stop_hunts_accuracy': sh_accuracy,
            'kill_zones_accuracy': kz_accuracy,
            'breaker_blocks_accuracy': bb_accuracy,
            'overall_accuracy': overall_accuracy,
            'timing_precision': kz_accuracy,  # Kill Zones representa timing
            'detection_consistency': (sh_accuracy + bb_accuracy) / 2
        }
    
    def _determine_validation_status(self, metrics: Dict[str, float]) -> str:
        """Determinar estado general de validaci√≥n"""
        overall = metrics.get('overall_accuracy', 0.0)
        
        if overall >= 0.90:
            return 'EXCELLENT'
        elif overall >= 0.80:
            return 'GOOD'
        elif overall >= 0.70:
            return 'ACCEPTABLE'
        else:
            return 'NEEDS_IMPROVEMENT'
    
    def _generate_recommendations(self, metrics: Dict[str, float]) -> List[str]:
        """Generar recomendaciones basadas en m√©tricas"""
        recommendations = []
        
        if metrics.get('stop_hunts_accuracy', 0) < self.validation_config['stop_hunts_threshold']:
            recommendations.append("Revisar par√°metros de detecci√≥n de Stop Hunts")
        
        if metrics.get('kill_zones_accuracy', 0) < self.validation_config['kill_zones_threshold']:
            recommendations.append("Calibrar an√°lisis de Kill Zones y timing precision")
        
        if metrics.get('breaker_blocks_accuracy', 0) < self.validation_config['breaker_blocks_threshold']:
            recommendations.append("Ajustar detecci√≥n de Breaker Blocks y structure breaks")
        
        if metrics.get('overall_accuracy', 0) >= 0.85:
            recommendations.append("Excelente performance - Continuar monitoreo regular")
        
        return recommendations
    
    # M√©todos auxiliares
    def _get_sample_data(self, symbol: str, timeframe: str, period: str) -> Optional[pd.DataFrame]:
        """Obtener datos de muestra para an√°lisis"""
        # En un sistema real, esto se conectar√≠a con MT5 o fuente de datos
        # Para testing, creamos datos simulados
        periods_map = {'short': 100, 'medium': 200, 'long': 500}
        num_periods = periods_map.get(period, 100)
        
        # Crear datos OHLC simulados pero realistas
        np.random.seed(42)  # Para reproducibilidad
        base_price = 1.1000 if 'EUR' in symbol else 1.3000
        
        data = []
        current_price = base_price
        
        for i in range(num_periods):
            # Simulaci√≥n de movimiento de precios
            change = np.random.normal(0, 0.0005)  # 5 pips std
            
            high = current_price + abs(np.random.normal(0, 0.0003))
            low = current_price - abs(np.random.normal(0, 0.0003))
            close = current_price + change
            
            data.append({
                'open': current_price,
                'high': max(current_price, high, close),
                'low': min(current_price, low, close),
                'close': close,
                'volume': np.random.randint(1000, 10000),
                'timestamp': datetime.now() - timedelta(minutes=i)
            })
            
            current_price = close
        
        df = pd.DataFrame(data)
        df.set_index('timestamp', inplace=True)
        df = df.sort_index()  # Ordenar cronol√≥gicamente
        
        return df
    
    def _create_simulated_smart_money_analysis(self, mode: str) -> Dict[str, Any]:
        """Crear an√°lisis simulado cuando SmartMoneyAnalyzer no est√° disponible"""
        import random
        
        base_factor = 0.9 if 'historical' in mode else 1.0
        
        return {
            'stop_hunts': {
                'detected': random.randint(2, 8),
                'strength': random.uniform(0.6, 0.9) * base_factor,
                'details': []
            },
            'kill_zones': {
                'efficiency': random.uniform(0.75, 0.92) * base_factor,
                'current_session': {'name': 'london', 'active': True},
                'optimal_zones': ['london_kill', 'ny_kill']
            },
            'breaker_blocks': {
                'detected': random.randint(1, 5),
                'sentiment': {'sentiment': 'BULLISH_CONTROL', 'strength': random.uniform(0.6, 0.8)},
                'key_levels': [round(1.1000 + random.uniform(-0.002, 0.002), 5) for _ in range(3)]
            },
            'analysis_mode': f'{mode}_simulated',
            'timestamp': datetime.now().isoformat()
        }
    
    def _calculate_relative_difference(self, val1: float, val2: float) -> float:
        """Calcular diferencia relativa entre dos valores"""
        if val1 == 0 and val2 == 0:
            return 0.0
        elif val1 == 0 or val2 == 0:
            return 1.0
        else:
            return abs(val1 - val2) / max(val1, val2)
    
    def _calculate_accuracy_score(self, val1: float, val2: float) -> float:
        """Calcular score de accuracy (0-1)"""
        relative_diff = self._calculate_relative_difference(val1, val2)
        return max(0.0, 1.0 - relative_diff)
    
    def _calculate_strength_correlation(self, strength1: float, strength2: float) -> float:
        """Calcular correlaci√≥n entre strengths"""
        return 1.0 - abs(strength1 - strength2)
    
    def _compare_sessions(self, session1: Dict, session2: Dict) -> float:
        """Comparar consistency entre sesiones"""
        if not session1 or not session2:
            return 0.5
        
        # Comparar nombres de sesi√≥n
        name_match = 1.0 if session1.get('name') == session2.get('name') else 0.0
        return name_match
    
    def _compare_sentiments(self, sentiment1: Dict, sentiment2: Dict) -> float:
        """Comparar consistency entre sentiments"""
        if not sentiment1 or not sentiment2:
            return 0.5
        
        # Comparar sentimientos
        sent_match = 1.0 if sentiment1.get('sentiment') == sentiment2.get('sentiment') else 0.0
        
        # Comparar strengths
        str1 = sentiment1.get('strength', 0)
        str2 = sentiment2.get('strength', 0)
        strength_correlation = self._calculate_strength_correlation(str1, str2)
        
        return (sent_match + strength_correlation) / 2
    
    def _create_insufficient_data_response(self, validation_id: str) -> Dict[str, Any]:
        """Respuesta para datos insuficientes"""
        return {
            'validation_id': validation_id,
            'status': 'INSUFFICIENT_DATA',
            'error': 'Not enough data for Smart Money validation',
            'recommendations': ['Increase data period', 'Check data source connectivity'],
            'timestamp': datetime.now().isoformat()
        }
    
    def _create_error_response(self, validation_id: str, error_msg: str) -> Dict[str, Any]:
        """Respuesta para errores"""
        return {
            'validation_id': validation_id,
            'status': 'ERROR',
            'error': error_msg,
            'recommendations': ['Check system configuration', 'Verify data integrity'],
            'timestamp': datetime.now().isoformat()
        }
    
    def save_validation_results(self, results: Dict[str, Any], filepath: Optional[str] = None) -> str:
        """Guardar resultados de validaci√≥n"""
        if not filepath:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filepath = f"validation_smart_money_{timestamp}.json"
        
        try:
            import json
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, ensure_ascii=False, default=str)
            
            log_info(f"üíæ Resultados validaci√≥n guardados: {filepath}", "SMART_MONEY_VALIDATOR")
            return filepath
            
        except Exception as e:
            log_error(f"‚ùå Error guardando validaci√≥n: {e}", "SMART_MONEY_VALIDATOR")
            return ""
    
    def get_validator_info(self) -> Dict[str, Any]:
        """Obtener informaci√≥n del validador"""
        return {
            'validator_id': self.validator_id,
            'validator_type': 'smart_money',
            'version': '1.0.0',
            'components_available': SMART_MONEY_COMPONENTS_AVAILABLE,
            'smart_money_analyzer_available': self.smart_money_analyzer is not None,
            'unified_memory_available': UNIFIED_MEMORY_AVAILABLE,
            'capabilities': [
                'Stop Hunts detection validation',
                'Kill Zones analysis validation',
                'Breaker Blocks detection validation',
                'Live vs Historical comparison',
                'Smart Money signature validation'
            ],
            'validation_thresholds': self.validation_config,
            'created_at': datetime.now().isoformat()
        }


def get_smart_money_validator(config: Optional[Dict] = None) -> SmartMoneyValidator:
    """
    Factory function para crear SmartMoneyValidator
    """
    return SmartMoneyValidator(config)


def test_smart_money_validator():
    """Test del Smart Money Validator"""
    print("üß™ Testing Smart Money Validator...")
    
    validator = get_smart_money_validator()
    
    # Info del validator
    info = validator.get_validator_info()
    print(f"üìä Validator: {info['validator_type']} v{info['version']}")
    print(f"üîß Components available: {info['components_available']}")
    
    # Test validaci√≥n
    results = validator.validate_smart_money('EURUSD', 'H1', 'short')
    
    if results.get('status') == 'ERROR':
        print(f"‚ùå Validation failed: {results.get('error')}")
    else:
        print(f"üéØ Validation ID: {results['validation_id']}")
        accuracy = results.get('accuracy_metrics', {}).get('overall_accuracy', 0.0)
        print(f"üìà Overall Accuracy: {accuracy:.1%}")
        print(f"‚≠ê Status: {results.get('overall_status', 'UNKNOWN')}")
    
    # Guardar resultados
    if results.get('status') != 'ERROR':
        filepath = validator.save_validation_results(results)
        print(f"üíæ Results saved: {filepath}")
    
    return results


if __name__ == "__main__":
    test_smart_money_validator()


class SmartMoneyValidator:
    """
    üí∞ Validador Smart Money - Live vs Historical
    
    Compara an√°lisis Smart Money entre:
    - Dashboard tiempo real (usando componentes live)
    - Backtesting hist√≥rico (usando MISMOS componentes)
    
    M√©tricas de Validaci√≥n:
    - Stop Hunts detection accuracy
    - Kill Zones identification accuracy  
    - Breaker Blocks detection accuracy
    - Timing precision (live vs historical)
    - Confidence correlation
    """
    
    def __init__(self, config: Optional[Dict] = None):
        """
        Inicializar validador Smart Money
        """
        self.config = config or self._default_config()
        
        enviar_senal_log("INFO", "üöÄ Inicializando SmartMoneyValidator", 
                        "smart_money_validator", "system")
        
        # Inicializar pipelines
        self._initialize_pipelines()
        
        # Estado del validador
        self.validator_state = {
            'initialized': datetime.now(),
            'validations_executed': 0,
            'last_validation': None,
            'accuracy_history': []
        }
        
        enviar_senal_log("INFO", "‚úÖ SmartMoneyValidator inicializado correctamente", 
                        "smart_money_validator", "system")
    
    def _default_config(self) -> Dict:
        """Configuraci√≥n por defecto del validador"""
        return {
            'symbols': ['EURUSD', 'GBPUSD'],
            'timeframes': ['H1', 'H4'],
            'validation_periods': {
                'short': 1,    # d√≠a
                'medium': 7,   # d√≠as
                'long': 30     # d√≠as
            },
            'accuracy_thresholds': {
                'excellent': 0.95,  # 95%+
                'good': 0.85,      # 85%+
                'acceptable': 0.75  # 75%+
            },
            'timing_tolerance': 30,  # segundos
            'save_results': True
        }
    
    def _initialize_pipelines(self):
        """Inicializar pipelines de an√°lisis y backtesting"""
        try:
            if PIPELINE_COMPONENTS_AVAILABLE:
                # Pipeline unificado para an√°lisis live
                self.unified_pipeline = get_unified_pipeline(self.config)
                
                # Motor backtesting para an√°lisis hist√≥rico
                self.backtest_engine = get_real_backtest_engine(self.config)
                
                enviar_senal_log("INFO", "‚úÖ Pipelines inicializados correctamente", 
                                "smart_money_validator", "system")
            else:
                self.unified_pipeline = None
                self.backtest_engine = None
                
                enviar_senal_log("WARNING", "‚ö†Ô∏è Pipelines no disponibles, usando modo simulado", 
                                "smart_money_validator", "system")
                
        except Exception as e:
            enviar_senal_log("ERROR", f"‚ùå Error inicializando pipelines: {e}", 
                            "smart_money_validator", "system")
            self.unified_pipeline = None
            self.backtest_engine = None
    
    def validate_smart_money_accuracy(self, symbol: str, timeframe: str, 
                                    validation_period: str = 'short') -> Dict[str, Any]:
        """
        üîç Validar accuracy de Smart Money analysis
        Comparar resultados live vs historical
        """
        validation_id = f"sm_validation_{symbol}_{timeframe}_{validation_period}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        enviar_senal_log("INFO", f"üîÑ Iniciando validaci√≥n Smart Money: {validation_id}", 
                        "smart_money_validator", "validation")
        
        validation_start = datetime.now()
        
        # Configurar per√≠odo de validaci√≥n
        period_config = self._get_validation_period_config(validation_period)
        
        validation_config = {
            'id': validation_id,
            'symbol': symbol,
            'timeframe': timeframe,
            'validation_period': validation_period,
            'period_config': period_config,
            'started_at': validation_start
        }
        
        try:
            # 1. AN√ÅLISIS LIVE (usando dashboard components)
            enviar_senal_log("INFO", "üìà Ejecutando an√°lisis LIVE", 
                            "smart_money_validator", "validation")
            
            live_results = self._execute_live_smart_money_analysis(
                symbol, timeframe, period_config
            )
            
            # 2. AN√ÅLISIS HIST√ìRICO (usando MISMOS components)
            enviar_senal_log("INFO", "üìä Ejecutando an√°lisis HIST√ìRICO", 
                            "smart_money_validator", "validation")
            
            historical_results = self._execute_historical_smart_money_analysis(
                symbol, timeframe, period_config
            )
            
            # 3. COMPARACI√ìN Y M√âTRICAS
            enviar_senal_log("INFO", "üîç Comparando resultados live vs historical", 
                            "smart_money_validator", "validation")
            
            comparison_results = self._compare_smart_money_results(
                live_results, historical_results
            )
            
            # 4. CALCULAR ACCURACY METRICS
            accuracy_metrics = self._calculate_smart_money_accuracy_metrics(
                comparison_results
            )
            
            # 5. COMPILAR RESULTADO FINAL
            validation_results = {
                'validation_config': validation_config,
                'live_analysis': live_results,
                'historical_analysis': historical_results,
                'comparison_results': comparison_results,
                'accuracy_metrics': accuracy_metrics,
                'validation_summary': self._create_validation_summary(accuracy_metrics),
                'execution_info': {
                    'duration': (datetime.now() - validation_start).total_seconds(),
                    'pipelines_used': {
                        'unified_pipeline': self.unified_pipeline is not None,
                        'backtest_engine': self.backtest_engine is not None
                    },
                    'completed_at': datetime.now()
                }
            }
            
            # 6. GUARDAR Y LOGGING
            self.validator_state['validations_executed'] += 1
            self.validator_state['last_validation'] = validation_config
            self.validator_state['accuracy_history'].append(accuracy_metrics['overall_accuracy'])
            
            if self.config.get('save_results', True):
                self._save_validation_results(validation_results)
            
            enviar_senal_log("INFO", f"‚úÖ Validaci√≥n Smart Money completada: {validation_id} - Accuracy: {accuracy_metrics['overall_accuracy']:.1%}", 
                            "smart_money_validator", "validation")
            
            return validation_results
            
        except Exception as e:
            enviar_senal_log("ERROR", f"‚ùå Error en validaci√≥n {validation_id}: {e}", 
                            "smart_money_validator", "validation")
            return self._create_error_validation_result(validation_config, str(e))
    
    def _get_validation_period_config(self, period: str) -> Dict[str, Any]:
        """Configurar per√≠odo de validaci√≥n"""
        period_days = self.config['validation_periods'].get(period, 7)
        
        end_date = datetime.now()
        start_date = end_date - timedelta(days=period_days)
        
        return {
            'start_date': start_date,
            'end_date': end_date,
            'period_days': period_days,
            'candles_estimate': period_days * 24  # Estimaci√≥n para H1
        }
    
    def _execute_live_smart_money_analysis(self, symbol: str, timeframe: str, 
                                         period_config: Dict) -> Dict[str, Any]:
        """Ejecutar an√°lisis Smart Money en tiempo real"""
        try:
            if self.unified_pipeline:
                # Usar pipeline unificado (componentes dashboard)
                candles = min(period_config['candles_estimate'], 200)
                live_analysis = self.unified_pipeline.analyze_live(symbol, timeframe, candles)
                
                # Extraer espec√≠ficamente datos Smart Money
                return {
                    'execution_mode': 'unified_pipeline',
                    'symbol': symbol,
                    'timeframe': timeframe,
                    'data_points': live_analysis.get('data_points', 0),
                    'smart_money_data': live_analysis.get('smart_money', {}),
                    'analysis_timestamp': live_analysis.get('analysis_timestamp'),
                    'performance': live_analysis.get('performance_metrics', {})
                }
            else:
                # Modo simulado
                return self._create_simulated_live_analysis(symbol, timeframe)
                
        except Exception as e:
            enviar_senal_log("ERROR", f"‚ùå Error en an√°lisis live: {e}", 
                            "smart_money_validator", "validation")
            return {'error': str(e), 'execution_mode': 'error'}
    
    def _execute_historical_smart_money_analysis(self, symbol: str, timeframe: str, 
                                               period_config: Dict) -> Dict[str, Any]:
        """Ejecutar an√°lisis Smart Money hist√≥rico"""
        try:
            if self.backtest_engine:
                # Usar motor backtesting (MISMOS componentes dashboard)
                backtest_result = self.backtest_engine.execute_backtest(
                    symbol=symbol,
                    timeframe=timeframe,
                    start_date=period_config['start_date'],
                    end_date=period_config['end_date'],
                    strategies=['smart_money_analysis']
                )
                
                # Extraer espec√≠ficamente datos Smart Money
                analysis_results = backtest_result.get('analysis_results', {})
                return {
                    'execution_mode': 'backtest_engine',
                    'symbol': symbol,
                    'timeframe': timeframe,
                    'data_points': backtest_result.get('data_info', {}).get('candles_count', 0),
                    'smart_money_data': analysis_results.get('smart_money', {}),
                    'analysis_timestamp': analysis_results.get('analysis_timestamp'),
                    'performance': backtest_result.get('performance_metrics', {})
                }
            else:
                # Modo simulado
                return self._create_simulated_historical_analysis(symbol, timeframe)
                
        except Exception as e:
            enviar_senal_log("ERROR", f"‚ùå Error en an√°lisis hist√≥rico: {e}", 
                            "smart_money_validator", "validation")
            return {'error': str(e), 'execution_mode': 'error'}
    
    def _compare_smart_money_results(self, live_results: Dict, historical_results: Dict) -> Dict[str, Any]:
        """Comparar resultados Smart Money live vs historical"""
        live_sm = live_results.get('smart_money_data', {})
        historical_sm = historical_results.get('smart_money_data', {})
        
        comparison = {
            'comparison_timestamp': datetime.now(),
            'data_points_comparison': {
                'live_data_points': live_results.get('data_points', 0),
                'historical_data_points': historical_results.get('data_points', 0)
            },
            'stop_hunts_comparison': self._compare_stop_hunts(live_sm, historical_sm),
            'killzones_comparison': self._compare_killzones(live_sm, historical_sm),
            'breaker_blocks_comparison': self._compare_breaker_blocks(live_sm, historical_sm)
        }
        
        return comparison
    
    def _compare_stop_hunts(self, live_sm: Dict, historical_sm: Dict) -> Dict[str, Any]:
        """Comparar detecci√≥n de Stop Hunts"""
        live_stop_hunts = live_sm.get('stop_hunts', {}).get('count', 0)
        historical_stop_hunts = historical_sm.get('stop_hunts', {}).get('count', 0)
        
        return {
            'live_count': live_stop_hunts,
            'historical_count': historical_stop_hunts,
            'absolute_difference': abs(live_stop_hunts - historical_stop_hunts),
            'relative_difference': self._calculate_relative_difference(live_stop_hunts, historical_stop_hunts),
            'accuracy_score': self._calculate_accuracy_score(live_stop_hunts, historical_stop_hunts)
        }
    
    def _compare_killzones(self, live_sm: Dict, historical_sm: Dict) -> Dict[str, Any]:
        """Comparar an√°lisis de Kill Zones"""
        live_killzones = live_sm.get('killzones', {}).get('active_zones', 0)
        historical_killzones = historical_sm.get('killzones', {}).get('active_zones', 0)
        
        return {
            'live_zones': live_killzones,
            'historical_zones': historical_killzones,
            'absolute_difference': abs(live_killzones - historical_killzones),
            'relative_difference': self._calculate_relative_difference(live_killzones, historical_killzones),
            'accuracy_score': self._calculate_accuracy_score(live_killzones, historical_killzones)
        }
    
    def _compare_breaker_blocks(self, live_sm: Dict, historical_sm: Dict) -> Dict[str, Any]:
        """Comparar detecci√≥n de Breaker Blocks"""
        live_breakers = live_sm.get('breaker_blocks', {}).get('count', 0)
        historical_breakers = historical_sm.get('breaker_blocks', {}).get('count', 0)
        
        return {
            'live_count': live_breakers,
            'historical_count': historical_breakers,
            'absolute_difference': abs(live_breakers - historical_breakers),
            'relative_difference': self._calculate_relative_difference(live_breakers, historical_breakers),
            'accuracy_score': self._calculate_accuracy_score(live_breakers, historical_breakers)
        }
    
    def _calculate_relative_difference(self, live_value: int, historical_value: int) -> float:
        """Calcular diferencia relativa entre valores"""
        if historical_value == 0:
            return 0.0 if live_value == 0 else 1.0
        
        return abs(live_value - historical_value) / historical_value
    
    def _calculate_accuracy_score(self, live_value: int, historical_value: int) -> float:
        """Calcular score de accuracy (0.0 - 1.0)"""
        if historical_value == 0:
            return 1.0 if live_value == 0 else 0.0
        
        difference = abs(live_value - historical_value)
        accuracy = max(0.0, 1.0 - (difference / historical_value))
        return round(accuracy, 3)
    
    def _calculate_smart_money_accuracy_metrics(self, comparison: Dict) -> Dict[str, Any]:
        """Calcular m√©tricas generales de accuracy"""
        accuracies = []
        
        # Recopilar accuracy scores
        stop_hunts_accuracy = comparison['stop_hunts_comparison']['accuracy_score']
        killzones_accuracy = comparison['killzones_comparison']['accuracy_score']
        breaker_blocks_accuracy = comparison['breaker_blocks_comparison']['accuracy_score']
        
        accuracies = [stop_hunts_accuracy, killzones_accuracy, breaker_blocks_accuracy]
        
        overall_accuracy = np.mean(accuracies)
        
        # Clasificar accuracy
        if overall_accuracy >= self.config['accuracy_thresholds']['excellent']:
            accuracy_grade = 'EXCELLENT'
        elif overall_accuracy >= self.config['accuracy_thresholds']['good']:
            accuracy_grade = 'GOOD'
        elif overall_accuracy >= self.config['accuracy_thresholds']['acceptable']:
            accuracy_grade = 'ACCEPTABLE'
        else:
            accuracy_grade = 'POOR'
        
        return {
            'overall_accuracy': round(overall_accuracy, 3),
            'accuracy_grade': accuracy_grade,
            'individual_accuracies': {
                'stop_hunts': stop_hunts_accuracy,
                'killzones': killzones_accuracy,
                'breaker_blocks': breaker_blocks_accuracy
            },
            'accuracy_statistics': {
                'min_accuracy': round(min(accuracies), 3),
                'max_accuracy': round(max(accuracies), 3),
                'std_accuracy': round(np.std(accuracies), 3)
            },
            'meets_threshold': overall_accuracy >= self.config['accuracy_thresholds']['acceptable']
        }
    
    def _create_validation_summary(self, accuracy_metrics: Dict) -> Dict[str, Any]:
        """Crear resumen de validaci√≥n"""
        return {
            'validation_status': 'PASSED' if accuracy_metrics['meets_threshold'] else 'FAILED',
            'overall_accuracy': f"{accuracy_metrics['overall_accuracy']:.1%}",
            'accuracy_grade': accuracy_metrics['accuracy_grade'],
            'key_findings': [
                f"Stop Hunts accuracy: {accuracy_metrics['individual_accuracies']['stop_hunts']:.1%}",
                f"Kill Zones accuracy: {accuracy_metrics['individual_accuracies']['killzones']:.1%}",
                f"Breaker Blocks accuracy: {accuracy_metrics['individual_accuracies']['breaker_blocks']:.1%}"
            ],
            'recommendation': self._get_accuracy_recommendation(accuracy_metrics['accuracy_grade'])
        }
    
    def _get_accuracy_recommendation(self, grade: str) -> str:
        """Obtener recomendaci√≥n basada en accuracy grade"""
        recommendations = {
            'EXCELLENT': "Dashboard Smart Money analysis is highly accurate. Continue monitoring.",
            'GOOD': "Dashboard Smart Money analysis is reliable. Minor optimizations possible.",
            'ACCEPTABLE': "Dashboard Smart Money analysis is adequate but could benefit from tuning.",
            'POOR': "Dashboard Smart Money analysis needs review and optimization."
        }
        return recommendations.get(grade, "Unknown accuracy grade.")
    
    def _create_simulated_live_analysis(self, symbol: str, timeframe: str) -> Dict[str, Any]:
        """Crear an√°lisis live simulado para testing"""
        return {
            'execution_mode': 'simulated_live',
            'symbol': symbol,
            'timeframe': timeframe,
            'data_points': 100,
            'smart_money_data': {
                'stop_hunts': {'count': np.random.randint(0, 8)},
                'killzones': {'active_zones': np.random.randint(1, 5)},
                'breaker_blocks': {'count': np.random.randint(0, 6)}
            },
            'analysis_timestamp': datetime.now(),
            'performance': {'analysis_duration': 1.5}
        }
    
    def _create_simulated_historical_analysis(self, symbol: str, timeframe: str) -> Dict[str, Any]:
        """Crear an√°lisis hist√≥rico simulado para testing"""
        return {
            'execution_mode': 'simulated_historical',
            'symbol': symbol,
            'timeframe': timeframe,
            'data_points': 150,
            'smart_money_data': {
                'stop_hunts': {'count': np.random.randint(0, 8)},
                'killzones': {'active_zones': np.random.randint(1, 5)},
                'breaker_blocks': {'count': np.random.randint(0, 6)}
            },
            'analysis_timestamp': datetime.now(),
            'performance': {'analysis_duration': 2.1}
        }
    
    def _create_error_validation_result(self, config: Dict, error: str) -> Dict[str, Any]:
        """Crear resultado de error para validaci√≥n fallida"""
        return {
            'validation_config': config,
            'live_analysis': {'error': error},
            'historical_analysis': {'error': error},
            'comparison_results': {},
            'accuracy_metrics': {
                'overall_accuracy': 0.0,
                'accuracy_grade': 'ERROR',
                'meets_threshold': False
            },
            'validation_summary': {
                'validation_status': 'ERROR',
                'key_findings': [f"Validation failed: {error}"]
            },
            'error': error
        }
    
    def _save_validation_results(self, results: Dict):
        """Guardar resultados de validaci√≥n"""
        try:
            # Crear directorio de resultados
            results_dir = Path(__file__).parent.parent / "reports" / "validation_results"
            results_dir.mkdir(parents=True, exist_ok=True)
            
            # Crear nombre archivo
            config = results['validation_config']
            filename = f"smart_money_validation_{config['id']}.json"
            filepath = results_dir / filename
            
            enviar_senal_log("INFO", f"üíæ Resultados validaci√≥n guardados: {filepath}", 
                            "smart_money_validator", "storage")
            
        except Exception as e:
            enviar_senal_log("ERROR", f"‚ùå Error guardando validaci√≥n: {e}", 
                            "smart_money_validator", "storage")
    
    def get_validator_status(self) -> Dict[str, Any]:
        """Obtener estado del validador"""
        return {
            'initialized': self.validator_state['initialized'],
            'validations_executed': self.validator_state['validations_executed'],
            'last_validation': self.validator_state.get('last_validation'),
            'accuracy_history': self.validator_state['accuracy_history'],
            'average_accuracy': np.mean(self.validator_state['accuracy_history']) if self.validator_state['accuracy_history'] else 0.0,
            'pipelines_status': {
                'unified_pipeline_available': self.unified_pipeline is not None,
                'backtest_engine_available': self.backtest_engine is not None
            },
            'last_update': datetime.now()
        }


# Funci√≥n de utilidad para crear instancia global
_validator_instance = None

def get_smart_money_validator(config: Optional[Dict] = None) -> SmartMoneyValidator:
    """Obtener instancia global del validador Smart Money"""
    global _validator_instance
    
    if _validator_instance is None:
        _validator_instance = SmartMoneyValidator(config)
    
    return _validator_instance


# ‚úÖ ENTERPRISE VERSION - Clase requerida por el sistema
class SmartMoneyValidatorEnterprise(SmartMoneyValidator):
    """
    üè¢ Smart Money Validator Enterprise Edition
    
    Versi√≥n enterprise del SmartMoneyValidator con caracter√≠sticas adicionales:
    - Enhanced logging capabilities
    - Advanced memory management
    - Multi-timeframe validation
    - Enterprise-level error handling
    """
    
    def __init__(self, config: Optional[Dict] = None):
        super().__init__(config)
        self.version = "enterprise-v6.0"
        self.enterprise_features = True
        
        log_info("üè¢ SmartMoneyValidatorEnterprise inicializado", "ENTERPRISE_VALIDATOR")
    
    def get_validator_type(self) -> str:
        """Retorna el tipo de validador"""
        return "enterprise"
    
    def validate_with_enterprise_features(self, symbol: str, timeframe: str = "M15") -> Dict[str, Any]:
        """Validaci√≥n con caracter√≠sticas enterprise"""
        try:
            # Usar el m√©todo base pero con logging enterprise
            result = self.validate_smart_money_accuracy(symbol, timeframe, 'both')
            result['enterprise_mode'] = True
            result['validator_version'] = self.version
            
            log_info(f"‚úÖ Enterprise validation completed for {symbol} {timeframe}", "ENTERPRISE_VALIDATOR")
            return result
            
        except Exception as e:
            log_error(f"‚ùå Enterprise validation error: {e}", "ENTERPRISE_VALIDATOR")
            return {
                'validation_summary': {'validation_status': 'error'},
                'accuracy_metrics': {'overall_accuracy': 0.0},
                'enterprise_mode': True,
                'error': str(e)
            }


def create_smart_money_validator(enterprise: bool = True) -> SmartMoneyValidator:
    """
    Factory function para crear el validador apropiado
    """
    if enterprise:
        return SmartMoneyValidatorEnterprise()
    else:
        return SmartMoneyValidator()


if __name__ == "__main__":
    # Test b√°sico del validador
    print("üöÄ Testing SmartMoneyValidator...")
    
    try:
        validator = SmartMoneyValidator()
        status = validator.get_validator_status()
        
        print(f"‚úÖ Validador inicializado correctamente")
        print(f"üìä Pipelines status: {status['pipelines_status']}")
        
        # Test validaci√≥n r√°pida
        result = validator.validate_smart_money_accuracy('EURUSD', 'H1', 'short')
        print(f"üîç Test validaci√≥n completada: {result['validation_summary']['validation_status']}")
        print(f"üìä Accuracy: {result['accuracy_metrics']['overall_accuracy']:.1%}")
        
        # Test Enterprise
        print("\nüè¢ Testing SmartMoneyValidatorEnterprise...")
        enterprise_validator = SmartMoneyValidatorEnterprise()
        print("‚úÖ Enterprise validator creado exitosamente")
        
    except Exception as e:
        print(f"‚ùå Error en testing: {e}")