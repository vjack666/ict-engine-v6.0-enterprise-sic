#!/usr/bin/env python3
"""
üß† SMART MONEY DETECTOR v6.1 - ENTERPRISE
=========================================

Detector avanzado de Smart Money Concepts con integraci√≥n de health data:
- Liquidity sweep detection con validaci√≥n health-weighted
- Break of Structure (BOS) accuracy con real-time performance metrics
- Change of Character (CHoCH) refinement con connection quality filtering
- Health-integrated signal validation para maximum reliability

SMART MONEY CONCEPTS ENHANCED:
‚úÖ Institutional Order Flow Analysis
‚úÖ Retail Trap Identification
‚úÖ Liquidity Hunt Detection
‚úÖ Market Structure Breaks
‚úÖ Smart Money Footprint Tracking

HEALTH INTEGRATION BENEFITS:
‚úÖ Signal Reliability: Only process signals when MT5 connection is stable
‚úÖ Timing Precision: Adjust signal timing based on data latency
‚úÖ Quality Assurance: Weight signals based on connection performance
‚úÖ Error Prevention: Pause detection during connection issues

Autor: ICT Engine v6.1 Enterprise Team
Fecha: September 17, 2025 - FASE 2 Week 3 Day 1
"""

from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any, Union
from dataclasses import dataclass, field
from enum import Enum
import numpy as np
import pandas as pd
import sys
import os
import json
import time
from pathlib import Path

# Importar el sistema de logging central con dynamic import
LOGGER_AVAILABLE = False
try:
    # Add logging system path
    logging_path = Path(__file__).parent.parent
    if str(logging_path) not in sys.path:
        sys.path.insert(0, str(logging_path))
    
    # Dynamic import to avoid Pylance issues
    import importlib.util
    spec = importlib.util.spec_from_file_location(
        "smart_trading_logger", 
        logging_path / "smart_trading_logger.py"
    )
    if spec and spec.loader:
        logging_module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(logging_module)
        get_smart_logger = getattr(logging_module, 'get_smart_logger')
        log_info = getattr(logging_module, 'log_info')
        log_warning = getattr(logging_module, 'log_warning')
        log_error = getattr(logging_module, 'log_error')
        log_success = getattr(logging_module, 'log_success')
        LOGGER_AVAILABLE = True
    else:
        raise ImportError("Could not create module spec")
except Exception:
    # Fallback functions
    def get_smart_logger(): return None
    def log_info(msg, category="SMART_MONEY"): print(f"[INFO] {msg}")
    def log_warning(msg, category="SMART_MONEY"): print(f"[WARNING] {msg}")
    def log_error(msg, category="SMART_MONEY"): print(f"[ERROR] {msg}")
    def log_success(msg, category="SMART_MONEY"): print(f"[SUCCESS] {msg}")
    LOGGER_AVAILABLE = False

# Importar MT5 Health Monitor para integraci√≥n
try:
    from ..data_management.mt5_health_monitor import MT5HealthMonitor, HealthStatus
    MT5_HEALTH_AVAILABLE = True
except ImportError:
    MT5_HEALTH_AVAILABLE = False
    log_warning("MT5 Health Monitor not available, operating without health integration")

# Importar Order Blocks mejorados
try:
    from .order_blocks import EnhancedOrderBlockDetector, EnhancedOrderBlock, OrderBlockQuality
    ORDER_BLOCKS_AVAILABLE = True
except ImportError:
    ORDER_BLOCKS_AVAILABLE = False
    log_warning("Enhanced Order Blocks not available")

class SmartMoneySignalType(Enum):
    """Tipos de se√±ales de Smart Money"""
    BOS = "break_of_structure"          # Ruptura de estructura
    CHOCH = "change_of_character"       # Cambio de car√°cter
    LIQUIDITY_SWEEP = "liquidity_sweep" # Barrido de liquidez
    INDUCEMENT = "inducement"           # Inducimiento
    MANIPULATION = "manipulation"       # Manipulaci√≥n
    INSTITUTIONAL_FLOW = "institutional_flow"  # Flujo institucional

class MarketStructure(Enum):
    """Estados de estructura de mercado"""
    BULLISH = "bullish"
    BEARISH = "bearish"
    RANGING = "ranging"
    TRANSITION = "transition"

class LiquidityType(Enum):
    """Tipos de liquidez"""
    BUY_SIDE = "buy_side_liquidity"     # Liquidez de compra (stops arriba)
    SELL_SIDE = "sell_side_liquidity"   # Liquidez de venta (stops abajo)
    EQUAL_HIGHS = "equal_highs"         # M√°ximos iguales
    EQUAL_LOWS = "equal_lows"           # M√≠nimos iguales

@dataclass
class SmartMoneySignal:
    """Se√±al de Smart Money mejorada con health integration"""
    # Datos b√°sicos
    signal_type: SmartMoneySignalType
    direction: str  # "bullish" or "bearish"
    confidence: float
    strength: float
    
    # Datos de precio
    price_level: float
    entry_price: float
    stop_loss: float
    take_profit: float
    
    # M√©tricas de trading
    risk_reward: float
    probability: float
    
    # Nuevas mejoras v6.1
    health_score: float = 0.0
    quality_score: float = 0.0
    liquidity_context: Dict[str, Any] = field(default_factory=dict)
    market_structure: MarketStructure = MarketStructure.RANGING
    institutional_bias: str = "neutral"
    
    # Metadatos
    symbol: str = "UNKNOWN"
    timeframe: str = "UNKNOWN"
    timestamp: datetime = field(default_factory=datetime.now)
    
    # Performance tracking
    detection_latency_ms: float = 0.0
    data_reliability: float = 1.0
    
    # Confluencias
    order_block_confluence: bool = False
    volume_confluence: bool = False
    time_confluence: bool = False

class SmartMoneyDetector:
    """
    üß† SMART MONEY DETECTOR v6.1 ENTERPRISE
    =======================================
    
    Detector avanzado de conceptos de Smart Money con:
    ‚úÖ Liquidity sweep detection
    ‚úÖ BOS/CHoCH accuracy improvements
    ‚úÖ Health-integrated signal validation
    ‚úÖ Institutional flow analysis
    ‚úÖ Retail trap identification
    """
    
    def __init__(self, config: Optional[Dict] = None):
        self.config = config or {}
        
        # Configuraci√≥n b√°sica
        self.lookback_period = self.config.get('lookback_period', 30)
        self.min_confidence = self.config.get('min_confidence', 70)
        self.min_strength = self.config.get('min_strength', 60)
        
        # Configuraciones espec√≠ficas de Smart Money
        self.liquidity_threshold = self.config.get('liquidity_threshold', 0.8)
        self.bos_validation_period = self.config.get('bos_validation_period', 5)
        self.choch_confirmation_period = self.config.get('choch_confirmation_period', 3)
        self.manipulation_detection = self.config.get('enable_manipulation_detection', True)
        
        # Health integration settings
        self.health_weight = self.config.get('health_weight', 0.4)
        self.min_health_score = self.config.get('min_health_score', 0.6)
        
        # Performance thresholds
        self.max_detection_latency_ms = self.config.get('max_detection_latency_ms', 300)
        self.enable_order_block_confluence = self.config.get('enable_order_block_confluence', True)
        
        # Sistema de logging
        self.logger = get_smart_logger()
        
        # MT5 Health integration
        self.health_monitor = None
        if MT5_HEALTH_AVAILABLE:
            try:
                self.health_monitor = MT5HealthMonitor()
                log_success("MT5 Health Monitor integrated for Smart Money detection")
            except Exception as e:
                log_warning(f"Could not initialize MT5 Health Monitor: {e}")
        
        # Order Blocks integration
        self.order_block_detector = None
        if ORDER_BLOCKS_AVAILABLE and self.enable_order_block_confluence:
            try:
                self.order_block_detector = EnhancedOrderBlockDetector(config)
                log_success("Enhanced Order Blocks integrated for confluence analysis")
            except Exception as e:
                log_warning(f"Could not initialize Order Block detector: {e}")
        
        # Market structure tracking
        self.current_market_structure = MarketStructure.RANGING
        self.structure_highs = []  # Lista de m√°ximos para tracking de estructura
        self.structure_lows = []   # Lista de m√≠nimos para tracking de estructura
        
        # Liquidez tracking
        self.liquidity_levels = {
            'buy_side': [],   # Niveles de liquidez de compra
            'sell_side': []   # Niveles de liquidez de venta
        }
        
        # Estad√≠sticas mejoradas
        self.stats = {
            'total_signals': 0,
            'bos_detected': 0,
            'choch_detected': 0,
            'liquidity_sweeps': 0,
            'manipulations_detected': 0,
            'health_filtered': 0,
            'order_block_confluences': 0,
            'avg_detection_time_ms': 0.0,
            'accuracy_score': 0.0
        }
        
        # Configurar rutas
        self.project_root = Path(__file__).parent.parent.parent
        self.logs_dir = self.project_root / "05-LOGS" / "smart_money_detection"
        self.logs_dir.mkdir(parents=True, exist_ok=True)
        
        log_info("Smart Money Detector v6.1 initialized with enhanced features", "SMART_MONEY")
    
    def detect_smart_money_signals(self, 
                                 data: Any, 
                                 current_price: float,
                                 symbol: str = "UNKNOWN",
                                 timeframe: str = "UNKNOWN") -> List[SmartMoneySignal]:
        """
        üß† DETECCI√ìN PRINCIPAL DE SE√ëALES SMART MONEY
        ============================================
        
        Args:
            data: DataFrame con datos OHLCV
            current_price: Precio actual del s√≠mbolo
            symbol: S√≠mbolo de trading
            timeframe: Marco temporal
            
        Returns:
            Lista de SmartMoneySignal detectadas
        """
        
        start_time = time.time()
        self.stats['total_signals'] += 1
        
        # üè• HEALTH CHECK INICIAL
        health_score = self._get_health_score()
        if health_score < self.min_health_score:
            log_warning(f"Low health score ({health_score:.1%}), skipping Smart Money detection for {symbol}")
            self.stats['health_filtered'] += 1
            return []
        
        if len(data) < self.lookback_period:
            log_warning(f"Insufficient data for Smart Money analysis: {len(data)} < {self.lookback_period}")
            return []
        
        signals = []
        
        # üìä ACTUALIZAR ESTRUCTURA DE MERCADO
        self._update_market_structure(data)
        
        # üîç DETECTAR LIQUIDITY SWEEPS
        liquidity_signals = self._detect_liquidity_sweeps(data, current_price, symbol, timeframe, health_score)
        signals.extend(liquidity_signals)
        
        # üìà DETECTAR BREAK OF STRUCTURE (BOS)
        bos_signals = self._detect_break_of_structure(data, current_price, symbol, timeframe, health_score)
        signals.extend(bos_signals)
        
        # üîÑ DETECTAR CHANGE OF CHARACTER (CHoCH)
        choch_signals = self._detect_change_of_character(data, current_price, symbol, timeframe, health_score)
        signals.extend(choch_signals)
        
        # üé≠ DETECTAR MANIPULACI√ìN
        if self.manipulation_detection:
            manipulation_signals = self._detect_manipulation(data, current_price, symbol, timeframe, health_score)
            signals.extend(manipulation_signals)
        
        # üè¢ AN√ÅLISIS DE FLUJO INSTITUCIONAL
        institutional_signals = self._analyze_institutional_flow(data, current_price, symbol, timeframe, health_score)
        signals.extend(institutional_signals)
        
        # üîó AN√ÅLISIS DE CONFLUENCIAS
        signals = self._analyze_confluences(signals, data, current_price, symbol, timeframe)
        
        # üèÜ FILTRADO Y SCORING FINAL
        signals = self._apply_final_filtering(signals, health_score)
        
        # üìä ACTUALIZAR ESTAD√çSTICAS
        detection_time_ms = (time.time() - start_time) * 1000
        self._update_smart_money_stats(signals, detection_time_ms)
        
        # üìù LOGGING Y REPORTING
        self._log_smart_money_results(signals, symbol, timeframe, detection_time_ms, health_score)
        
        return signals
    
    def _get_health_score(self) -> float:
        """Obtener score de health del MT5"""
        if not self.health_monitor:
            return 1.0  # Asumir perfecto si no hay monitor
        
        try:
            health_data = self.health_monitor.get_health_summary()
            
            # Calcular score espec√≠fico para Smart Money (m√°s estricto)
            connection_score = 1.0 if health_data.get('connected', True) else 0.0
            latency_score = max(0.0, 1.0 - (health_data.get('last_ping_ms', 0) / 500.0))  # M√°s estricto
            reliability_score = health_data.get('uptime_percentage', 100) / 100.0
            
            # Score combinado con pesos espec√≠ficos para Smart Money
            health_score = (connection_score * 0.6 + latency_score * 0.3 + reliability_score * 0.1)
            return max(0.0, min(1.0, health_score))
            
        except Exception as e:
            log_warning(f"Could not get health score for Smart Money: {e}")
            return 0.7  # Score conservador para Smart Money
    
    def _update_market_structure(self, data: Any):
        """Actualizar tracking de estructura de mercado"""
        try:
            # Obtener √∫ltimos swing highs y lows
            recent_data = data.tail(20)
            
            # Identificar swing highs
            for i in range(2, len(recent_data) - 2):
                current_high = recent_data.iloc[i]['high']
                if (current_high > recent_data.iloc[i-1]['high'] and 
                    current_high > recent_data.iloc[i-2]['high'] and
                    current_high > recent_data.iloc[i+1]['high'] and 
                    current_high > recent_data.iloc[i+2]['high']):
                    
                    self.structure_highs.append({
                        'price': current_high,
                        'timestamp': recent_data.index[i],
                        'index': i
                    })
            
            # Identificar swing lows
            for i in range(2, len(recent_data) - 2):
                current_low = recent_data.iloc[i]['low']
                if (current_low < recent_data.iloc[i-1]['low'] and 
                    current_low < recent_data.iloc[i-2]['low'] and
                    current_low < recent_data.iloc[i+1]['low'] and 
                    current_low < recent_data.iloc[i+2]['low']):
                    
                    self.structure_lows.append({
                        'price': current_low,
                        'timestamp': recent_data.index[i],
                        'index': i
                    })
            
            # Mantener solo los √∫ltimos 10 de cada uno
            self.structure_highs = self.structure_highs[-10:]
            self.structure_lows = self.structure_lows[-10:]
            
            # Determinar estructura actual
            if len(self.structure_highs) >= 2 and len(self.structure_lows) >= 2:
                latest_high = self.structure_highs[-1]['price']
                previous_high = self.structure_highs[-2]['price']
                latest_low = self.structure_lows[-1]['price']
                previous_low = self.structure_lows[-2]['price']
                
                if latest_high > previous_high and latest_low > previous_low:
                    self.current_market_structure = MarketStructure.BULLISH
                elif latest_high < previous_high and latest_low < previous_low:
                    self.current_market_structure = MarketStructure.BEARISH
                else:
                    self.current_market_structure = MarketStructure.RANGING
            
        except Exception as e:
            log_warning(f"Error updating market structure: {e}")
    
    def _detect_liquidity_sweeps(self, data: Any, current_price: float, 
                               symbol: str, timeframe: str, health_score: float) -> List[SmartMoneySignal]:
        """Detectar barridos de liquidez"""
        signals = []
        
        try:
            # Buscar equal highs y equal lows para identificar liquidez
            recent_data = data.tail(15)
            
            # Detectar equal highs (buy-side liquidity)
            equal_highs = self._find_equal_levels(recent_data, 'high')
            for level in equal_highs:
                if self._is_liquidity_swept(data, level, 'high'):
                    signal = self._create_liquidity_sweep_signal(
                        level, 'bearish', LiquidityType.BUY_SIDE, 
                        current_price, symbol, timeframe, health_score
                    )
                    if signal:
                        signals.append(signal)
                        self.stats['liquidity_sweeps'] += 1
            
            # Detectar equal lows (sell-side liquidity)
            equal_lows = self._find_equal_levels(recent_data, 'low')
            for level in equal_lows:
                if self._is_liquidity_swept(data, level, 'low'):
                    signal = self._create_liquidity_sweep_signal(
                        level, 'bullish', LiquidityType.SELL_SIDE,
                        current_price, symbol, timeframe, health_score
                    )
                    if signal:
                        signals.append(signal)
                        self.stats['liquidity_sweeps'] += 1
            
        except Exception as e:
            log_error(f"Error detecting liquidity sweeps: {e}")
        
        return signals
    
    def _find_equal_levels(self, data: Any, price_type: str, tolerance: float = 0.0005) -> List[float]:
        """Encontrar niveles iguales (equal highs/lows)"""
        levels = []
        prices = data[price_type].values
        
        for i in range(len(prices)):
            current_price = prices[i]
            equal_count = 1
            
            # Buscar precios similares
            for j in range(len(prices)):
                if i != j and abs(prices[j] - current_price) <= tolerance:
                    equal_count += 1
            
            # Si hay al menos 2 niveles iguales, es candidato a liquidez
            if equal_count >= 2 and current_price not in levels:
                levels.append(current_price)
        
        return levels
    
    def _is_liquidity_swept(self, data: Any, level: float, price_type: str) -> bool:
        """Verificar si un nivel de liquidez fue barrido"""
        recent_prices = data[price_type].tail(5).values
        
        if price_type == 'high':
            # Para highs, verificar si el precio reciente super√≥ el nivel
            return any(price > level for price in recent_prices)
        else:
            # Para lows, verificar si el precio reciente estuvo por debajo del nivel
            return any(price < level for price in recent_prices)
    
    def _create_liquidity_sweep_signal(self, level: float, direction: str, liquidity_type: LiquidityType,
                                     current_price: float, symbol: str, timeframe: str, 
                                     health_score: float) -> Optional[SmartMoneySignal]:
        """Crear se√±al de barrido de liquidez"""
        try:
            # Calcular m√©tricas de trading
            if direction == 'bullish':
                entry_price = level + 0.0005  # Entrada por encima del sweep
                stop_loss = level - 0.0015
                take_profit = entry_price + (entry_price - stop_loss) * 2.0
            else:
                entry_price = level - 0.0005  # Entrada por debajo del sweep
                stop_loss = level + 0.0015
                take_profit = entry_price - (stop_loss - entry_price) * 2.0
            
            risk = abs(entry_price - stop_loss)
            reward = abs(take_profit - entry_price)
            risk_reward = reward / risk if risk > 0 else 0
            
            # Confianza basada en health y contexto
            base_confidence = 75.0
            health_boost = health_score * 15.0
            confidence = min(95.0, base_confidence + health_boost)
            
            return SmartMoneySignal(
                signal_type=SmartMoneySignalType.LIQUIDITY_SWEEP,
                direction=direction,
                confidence=confidence,
                strength=70.0 + health_score * 20.0,
                price_level=level,
                entry_price=entry_price,
                stop_loss=stop_loss,
                take_profit=take_profit,
                risk_reward=risk_reward,
                probability=confidence,
                health_score=health_score,
                quality_score=confidence * health_score,
                liquidity_context={
                    'type': liquidity_type.value,
                    'level': level,
                    'sweep_confirmed': True
                },
                market_structure=self.current_market_structure,
                institutional_bias='bullish' if direction == 'bullish' else 'bearish',
                symbol=symbol,
                timeframe=timeframe,
                timestamp=datetime.now(),
                data_reliability=health_score
            )
            
        except Exception as e:
            log_error(f"Error creating liquidity sweep signal: {e}")
            return None
    
    def _detect_break_of_structure(self, data: Any, current_price: float,
                                 symbol: str, timeframe: str, health_score: float) -> List[SmartMoneySignal]:
        """Detectar Break of Structure (BOS)"""
        signals = []
        
        try:
            if len(self.structure_highs) < 2 or len(self.structure_lows) < 2:
                return signals
            
            recent_high = data['high'].tail(5).max()
            recent_low = data['low'].tail(5).min()
            
            # BOS Bullish: ruptura de estructura bearish
            if self.current_market_structure == MarketStructure.BEARISH:
                last_structure_high = self.structure_highs[-1]['price']
                if recent_high > last_structure_high:
                    signal = self._create_bos_signal(
                        'bullish', last_structure_high, current_price, 
                        symbol, timeframe, health_score
                    )
                    if signal:
                        signals.append(signal)
                        self.stats['bos_detected'] += 1
            
            # BOS Bearish: ruptura de estructura bullish
            if self.current_market_structure == MarketStructure.BULLISH:
                last_structure_low = self.structure_lows[-1]['price']
                if recent_low < last_structure_low:
                    signal = self._create_bos_signal(
                        'bearish', last_structure_low, current_price,
                        symbol, timeframe, health_score
                    )
                    if signal:
                        signals.append(signal)
                        self.stats['bos_detected'] += 1
            
        except Exception as e:
            log_error(f"Error detecting BOS: {e}")
        
        return signals
    
    def _create_bos_signal(self, direction: str, break_level: float, current_price: float,
                          symbol: str, timeframe: str, health_score: float) -> Optional[SmartMoneySignal]:
        """Crear se√±al de Break of Structure"""
        try:
            # Calcular m√©tricas de trading para BOS
            if direction == 'bullish':
                entry_price = break_level + 0.0003
                stop_loss = break_level - 0.0020
                take_profit = entry_price + (entry_price - stop_loss) * 2.5
            else:
                entry_price = break_level - 0.0003
                stop_loss = break_level + 0.0020
                take_profit = entry_price - (stop_loss - entry_price) * 2.5
            
            risk = abs(entry_price - stop_loss)
            reward = abs(take_profit - entry_price)
            risk_reward = reward / risk if risk > 0 else 0
            
            # Confianza alta para BOS confirmado
            base_confidence = 85.0
            health_boost = health_score * 10.0
            confidence = min(95.0, base_confidence + health_boost)
            
            return SmartMoneySignal(
                signal_type=SmartMoneySignalType.BOS,
                direction=direction,
                confidence=confidence,
                strength=80.0 + health_score * 15.0,
                price_level=break_level,
                entry_price=entry_price,
                stop_loss=stop_loss,
                take_profit=take_profit,
                risk_reward=risk_reward,
                probability=confidence,
                health_score=health_score,
                quality_score=confidence * health_score,
                liquidity_context={
                    'break_level': break_level,
                    'previous_structure': self.current_market_structure.value
                },
                market_structure=MarketStructure.TRANSITION,
                institutional_bias='strong_' + direction,
                symbol=symbol,
                timeframe=timeframe,
                timestamp=datetime.now(),
                data_reliability=health_score
            )
            
        except Exception as e:
            log_error(f"Error creating BOS signal: {e}")
            return None
    
    def _detect_change_of_character(self, data: Any, current_price: float,
                                  symbol: str, timeframe: str, health_score: float) -> List[SmartMoneySignal]:
        """Detectar Change of Character (CHoCH)"""
        signals = []
        
        try:
            # CHoCH es un BOS m√°s d√©bil - cambio en la direcci√≥n del impulso
            if len(data) < 10:
                return signals
            
            # An√°lizar √∫ltimas 10 velas para detectar cambio de car√°cter
            recent_data = data.tail(10)
            
            # Detectar cambios en la direcci√≥n del momentum
            momentum_changes = self._analyze_momentum_changes(recent_data)
            
            for change in momentum_changes:
                signal = self._create_choch_signal(
                    change, current_price, symbol, timeframe, health_score
                )
                if signal:
                    signals.append(signal)
                    self.stats['choch_detected'] += 1
            
        except Exception as e:
            log_error(f"Error detecting CHoCH: {e}")
        
        return signals
    
    def _analyze_momentum_changes(self, data: Any) -> List[Dict[str, Any]]:
        """Analizar cambios de momentum para CHoCH"""
        changes = []
        
        try:
            # Calcular momentum simple
            closes = data['close'].values
            momentum = []
            
            for i in range(1, len(closes)):
                momentum.append(closes[i] - closes[i-1])
            
            # Buscar cambios significativos en la direcci√≥n
            for i in range(3, len(momentum)):
                recent_momentum = momentum[i-3:i]
                current_momentum = momentum[i]
                
                avg_recent = sum(recent_momentum) / len(recent_momentum)
                
                # Detectar cambio de direcci√≥n
                if (avg_recent > 0 and current_momentum < -abs(avg_recent) * 0.5) or \
                   (avg_recent < 0 and current_momentum > abs(avg_recent) * 0.5):
                    
                    changes.append({
                        'direction': 'bullish' if current_momentum > 0 else 'bearish',
                        'strength': abs(current_momentum),
                        'index': i,
                        'price': closes[i]
                    })
            
        except Exception as e:
            log_warning(f"Error analyzing momentum changes: {e}")
        
        return changes
    
    def _create_choch_signal(self, change: Dict[str, Any], current_price: float,
                           symbol: str, timeframe: str, health_score: float) -> Optional[SmartMoneySignal]:
        """Crear se√±al de Change of Character"""
        try:
            direction = change['direction']
            change_price = change['price']
            
            # M√©tricas de trading m√°s conservadoras para CHoCH
            if direction == 'bullish':
                entry_price = change_price + 0.0002
                stop_loss = change_price - 0.0010
                take_profit = entry_price + (entry_price - stop_loss) * 1.5
            else:
                entry_price = change_price - 0.0002
                stop_loss = change_price + 0.0010
                take_profit = entry_price - (stop_loss - entry_price) * 1.5
            
            risk = abs(entry_price - stop_loss)
            reward = abs(take_profit - entry_price)
            risk_reward = reward / risk if risk > 0 else 0
            
            # Confianza moderada para CHoCH
            base_confidence = 70.0
            health_boost = health_score * 12.0
            confidence = min(90.0, base_confidence + health_boost)
            
            return SmartMoneySignal(
                signal_type=SmartMoneySignalType.CHOCH,
                direction=direction,
                confidence=confidence,
                strength=65.0 + health_score * 20.0,
                price_level=change_price,
                entry_price=entry_price,
                stop_loss=stop_loss,
                take_profit=take_profit,
                risk_reward=risk_reward,
                probability=confidence,
                health_score=health_score,
                quality_score=confidence * health_score * 0.9,  # Ligeramente menor que BOS
                liquidity_context={
                    'momentum_change': change['strength'],
                    'change_level': change_price
                },
                market_structure=self.current_market_structure,
                institutional_bias='weak_' + direction,
                symbol=symbol,
                timeframe=timeframe,
                timestamp=datetime.now(),
                data_reliability=health_score
            )
            
        except Exception as e:
            log_error(f"Error creating CHoCH signal: {e}")
            return None
    
    def _detect_manipulation(self, data: Any, current_price: float,
                           symbol: str, timeframe: str, health_score: float) -> List[SmartMoneySignal]:
        """Detectar manipulaci√≥n del mercado"""
        signals = []
        
        try:
            # Buscar patrones de manipulaci√≥n: spikes seguidos de reversal
            recent_data = data.tail(8)
            
            for i in range(2, len(recent_data) - 1):
                current_candle = recent_data.iloc[i]
                prev_candle = recent_data.iloc[i-1]
                next_candle = recent_data.iloc[i+1]
                
                # Detectar spike de manipulaci√≥n
                if self._is_manipulation_spike(current_candle, prev_candle, next_candle):
                    signal = self._create_manipulation_signal(
                        current_candle, current_price, symbol, timeframe, health_score
                    )
                    if signal:
                        signals.append(signal)
                        self.stats['manipulations_detected'] += 1
            
        except Exception as e:
            log_error(f"Error detecting manipulation: {e}")
        
        return signals
    
    def _is_manipulation_spike(self, current: Any, prev: Any, next: Any) -> bool:
        """Detectar si una vela es un spike de manipulaci√≥n"""
        try:
            # Rangos de las velas
            current_range = current['high'] - current['low']
            prev_range = prev['high'] - prev['low']
            next_range = next['high'] - next['low']
            
            # El spike debe ser significativamente m√°s grande
            if current_range < prev_range * 1.5 or current_range < next_range * 1.5:
                return False
            
            # Debe haber reversal r√°pido
            if current['close'] > current['open']:  # Vela bullish
                # Spike up seguido de cierre cerca del low
                if current['close'] < current['low'] + current_range * 0.3:
                    return True
            else:  # Vela bearish
                # Spike down seguido de cierre cerca del high
                if current['close'] > current['high'] - current_range * 0.3:
                    return True
            
            return False
            
        except Exception as e:
            log_warning(f"Error checking manipulation spike: {e}")
            return False
    
    def _create_manipulation_signal(self, candle: Any, current_price: float,
                                  symbol: str, timeframe: str, health_score: float) -> Optional[SmartMoneySignal]:
        """Crear se√±al de manipulaci√≥n"""
        try:
            # Determinar direcci√≥n basada en el tipo de manipulaci√≥n
            if candle['close'] > candle['open']:
                # Manipulaci√≥n bearish (fake breakout al alza)
                direction = 'bearish'
                entry_price = candle['low'] - 0.0002
                stop_loss = candle['high'] + 0.0005
                take_profit = entry_price - (stop_loss - entry_price) * 2.0
            else:
                # Manipulaci√≥n bullish (fake breakout a la baja)
                direction = 'bullish'
                entry_price = candle['high'] + 0.0002
                stop_loss = candle['low'] - 0.0005
                take_profit = entry_price + (entry_price - stop_loss) * 2.0
            
            risk = abs(entry_price - stop_loss)
            reward = abs(take_profit - entry_price)
            risk_reward = reward / risk if risk > 0 else 0
            
            # Confianza moderada para manipulaci√≥n
            base_confidence = 72.0
            health_boost = health_score * 18.0
            confidence = min(92.0, base_confidence + health_boost)
            
            return SmartMoneySignal(
                signal_type=SmartMoneySignalType.MANIPULATION,
                direction=direction,
                confidence=confidence,
                strength=68.0 + health_score * 22.0,
                price_level=(candle['high'] + candle['low']) / 2,
                entry_price=entry_price,
                stop_loss=stop_loss,
                take_profit=take_profit,
                risk_reward=risk_reward,
                probability=confidence,
                health_score=health_score,
                quality_score=confidence * health_score * 0.95,
                liquidity_context={
                    'manipulation_type': 'fake_breakout',
                    'spike_range': candle['high'] - candle['low']
                },
                market_structure=self.current_market_structure,
                institutional_bias='manipulation_' + direction,
                symbol=symbol,
                timeframe=timeframe,
                timestamp=datetime.now(),
                data_reliability=health_score
            )
            
        except Exception as e:
            log_error(f"Error creating manipulation signal: {e}")
            return None
    
    def _analyze_institutional_flow(self, data: Any, current_price: float,
                                  symbol: str, timeframe: str, health_score: float) -> List[SmartMoneySignal]:
        """Analizar flujo institucional"""
        signals = []
        
        try:
            # An√°lisis b√°sico de flujo institucional basado en volumen y precio
            if 'volume' not in data.columns:
                return signals
            
            recent_data = data.tail(15)
            
            # Buscar divergencias precio-volumen que indiquen flujo institucional
            price_momentum = recent_data['close'].pct_change().tail(5).sum()
            volume_momentum = recent_data['volume'].pct_change().tail(5).sum()
            
            # Divergencia significativa indica posible flujo institucional
            if abs(price_momentum) > 0.001 and abs(volume_momentum) > 0.1:
                if (price_momentum > 0 and volume_momentum < 0) or \
                   (price_momentum < 0 and volume_momentum > 0):
                    
                    # Crear se√±al de flujo institucional
                    direction = 'bearish' if price_momentum > 0 else 'bullish'
                    
                    signal = self._create_institutional_flow_signal(
                        direction, current_price, symbol, timeframe, health_score,
                        price_momentum, volume_momentum
                    )
                    
                    if signal:
                        signals.append(signal)
            
        except Exception as e:
            log_error(f"Error analyzing institutional flow: {e}")
        
        return signals
    
    def _create_institutional_flow_signal(self, direction: str, current_price: float,
                                        symbol: str, timeframe: str, health_score: float,
                                        price_momentum: float, volume_momentum: float) -> Optional[SmartMoneySignal]:
        """Crear se√±al de flujo institucional"""
        try:
            # M√©tricas de trading basadas en el flujo detectado
            if direction == 'bullish':
                entry_price = current_price + 0.0003
                stop_loss = current_price - 0.0012
                take_profit = entry_price + (entry_price - stop_loss) * 2.2
            else:
                entry_price = current_price - 0.0003
                stop_loss = current_price + 0.0012
                take_profit = entry_price - (stop_loss - entry_price) * 2.2
            
            risk = abs(entry_price - stop_loss)
            reward = abs(take_profit - entry_price)
            risk_reward = reward / risk if risk > 0 else 0
            
            # Confianza basada en la divergencia detectada
            divergence_strength = abs(price_momentum) + abs(volume_momentum)
            base_confidence = 68.0 + min(20.0, divergence_strength * 100)
            health_boost = health_score * 12.0
            confidence = min(88.0, base_confidence + health_boost)
            
            return SmartMoneySignal(
                signal_type=SmartMoneySignalType.INSTITUTIONAL_FLOW,
                direction=direction,
                confidence=confidence,
                strength=65.0 + health_score * 25.0,
                price_level=current_price,
                entry_price=entry_price,
                stop_loss=stop_loss,
                take_profit=take_profit,
                risk_reward=risk_reward,
                probability=confidence,
                health_score=health_score,
                quality_score=confidence * health_score * 0.92,
                liquidity_context={
                    'price_momentum': price_momentum,
                    'volume_momentum': volume_momentum,
                    'divergence_strength': divergence_strength
                },
                market_structure=self.current_market_structure,
                institutional_bias='institutional_' + direction,
                symbol=symbol,
                timeframe=timeframe,
                timestamp=datetime.now(),
                data_reliability=health_score
            )
            
        except Exception as e:
            log_error(f"Error creating institutional flow signal: {e}")
            return None
    
    def _analyze_confluences(self, signals: List[SmartMoneySignal], data: Any, 
                           current_price: float, symbol: str, timeframe: str) -> List[SmartMoneySignal]:
        """Analizar confluencias con Order Blocks y otros factores"""
        
        # Order Block confluence
        if self.order_block_detector:
            try:
                order_blocks = self.order_block_detector.detect_enhanced_order_blocks(
                    data, current_price, symbol, timeframe
                )
                
                for signal in signals:
                    # Buscar confluencia con Order Blocks
                    for ob in order_blocks:
                        price_diff = abs(signal.price_level - ob.price)
                        if price_diff < 0.0010:  # Dentro de 10 pips
                            signal.order_block_confluence = True
                            signal.confidence = min(98.0, signal.confidence + 8.0)
                            signal.quality_score *= 1.15
                            self.stats['order_block_confluences'] += 1
                            break
                
            except Exception as e:
                log_warning(f"Error analyzing Order Block confluences: {e}")
        
        # Volume confluence
        if 'volume' in data.columns:
            try:
                avg_volume = data['volume'].mean()
                recent_volume = data['volume'].tail(3).mean()
                
                for signal in signals:
                    if recent_volume > avg_volume * 1.2:
                        signal.volume_confluence = True
                        signal.confidence = min(95.0, signal.confidence + 5.0)
            
            except Exception as e:
                log_warning(f"Error analyzing volume confluences: {e}")
        
        # Time confluence (sesiones de trading activas)
        current_hour = datetime.now().hour
        if 8 <= current_hour <= 17 or 21 <= current_hour <= 23:  # Sesiones London/NY
            for signal in signals:
                signal.time_confluence = True
                signal.confidence = min(92.0, signal.confidence + 3.0)
        
        return signals
    
    def _apply_final_filtering(self, signals: List[SmartMoneySignal], health_score: float) -> List[SmartMoneySignal]:
        """Aplicar filtrado final y scoring"""
        filtered_signals = []
        
        for signal in signals:
            # Filtros de calidad
            if signal.confidence >= self.min_confidence and \
               signal.strength >= self.min_strength and \
               signal.health_score >= self.min_health_score and \
               signal.risk_reward >= 1.2:
                
                # Ajustar scoring final
                signal.quality_score = (
                    signal.confidence * 0.4 +
                    signal.strength * 0.3 +
                    signal.health_score * 100 * 0.2 +
                    signal.risk_reward * 10 * 0.1
                )
                
                filtered_signals.append(signal)
        
        # Ordenar por quality score
        filtered_signals.sort(key=lambda x: x.quality_score, reverse=True)
        
        return filtered_signals[:3]  # Top 3 se√±ales
    
    def _update_smart_money_stats(self, signals: List[SmartMoneySignal], detection_time_ms: float):
        """Actualizar estad√≠sticas del detector"""
        self.stats['avg_detection_time_ms'] = (
            (self.stats['avg_detection_time_ms'] * (self.stats['total_signals'] - 1) + detection_time_ms) /
            self.stats['total_signals']
        )
        
        # Actualizar latency en signals
        for signal in signals:
            signal.detection_latency_ms = detection_time_ms
        
        # Calcular accuracy score estimado
        if signals:
            avg_confidence = sum(s.confidence for s in signals) / len(signals)
            avg_health = sum(s.health_score for s in signals) / len(signals)
            self.stats['accuracy_score'] = (avg_confidence * 0.7 + avg_health * 100 * 0.3)
    
    def _log_smart_money_results(self, signals: List[SmartMoneySignal], symbol: str, 
                               timeframe: str, detection_time_ms: float, health_score: float):
        """Log detallado de resultados Smart Money"""
        if not signals:
            log_info(f"No Smart Money signals found for {symbol} {timeframe} (Health: {health_score:.1%})", 
                    "SMART_MONEY")
            return
        
        # Log resumen
        signal_types = {}
        for signal in signals:
            signal_type = signal.signal_type.value
            signal_types[signal_type] = signal_types.get(signal_type, 0) + 1
        
        summary_msg = (f"{len(signals)} Smart Money signals detected for {symbol} {timeframe} "
                      f"in {detection_time_ms:.1f}ms | Health: {health_score:.1%} | "
                      f"Types: {signal_types}")
        log_success(summary_msg, "SMART_MONEY")
        
        # Log detalle de cada se√±al
        for i, signal in enumerate(signals, 1):
            detail_msg = (f"#{i} {signal.signal_type.value.upper()} {signal.direction} | "
                         f"Confidence: {signal.confidence:.1f}% | "
                         f"Strength: {signal.strength:.1f} | "
                         f"R:R: {signal.risk_reward:.2f} | "
                         f"Quality: {signal.quality_score:.1f} | "
                         f"Entry: {signal.entry_price:.5f}")
            log_info(detail_msg, "SMART_MONEY")
        
        # Guardar reporte detallado
        self._save_smart_money_session_report(signals, symbol, timeframe, detection_time_ms, health_score)
    
    def _save_smart_money_session_report(self, signals: List[SmartMoneySignal], symbol: str,
                                       timeframe: str, detection_time_ms: float, health_score: float):
        """Guardar reporte detallado de la sesi√≥n Smart Money"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            report_file = self.logs_dir / f"smart_money_session_{symbol}_{timeframe}_{timestamp}.json"
            
            report_data = {
                'session_info': {
                    'symbol': symbol,
                    'timeframe': timeframe,
                    'timestamp': datetime.now().isoformat(),
                    'detection_time_ms': detection_time_ms,
                    'health_score': health_score,
                    'signals_detected': len(signals)
                },
                'market_structure': {
                    'current_structure': self.current_market_structure.value,
                    'structure_highs_count': len(self.structure_highs),
                    'structure_lows_count': len(self.structure_lows)
                },
                'detection_stats': dict(self.stats),
                'signals': [
                    {
                        'signal_type': signal.signal_type.value,
                        'direction': signal.direction,
                        'confidence': signal.confidence,
                        'strength': signal.strength,
                        'price_level': signal.price_level,
                        'entry_price': signal.entry_price,
                        'stop_loss': signal.stop_loss,
                        'take_profit': signal.take_profit,
                        'risk_reward': signal.risk_reward,
                        'quality_score': signal.quality_score,
                        'health_score': signal.health_score,
                        'liquidity_context': signal.liquidity_context,
                        'market_structure': signal.market_structure.value,
                        'institutional_bias': signal.institutional_bias,
                        'confluences': {
                            'order_block': signal.order_block_confluence,
                            'volume': signal.volume_confluence,
                            'time': signal.time_confluence
                        }
                    }
                    for signal in signals
                ]
            }
            
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=2, ensure_ascii=False, default=str)
            
            log_success(f"Smart Money session report saved: {report_file}", "SMART_MONEY")
            
        except Exception as e:
            log_error(f"Error saving Smart Money session report: {e}")
    
    def get_smart_money_stats(self) -> Dict[str, Any]:
        """Obtener estad√≠sticas del detector Smart Money"""
        return {
            **self.stats,
            'market_structure': self.current_market_structure.value,
            'structure_levels': {
                'highs': len(self.structure_highs),
                'lows': len(self.structure_lows)
            },
            'health_integration_enabled': self.health_monitor is not None,
            'order_block_confluence_enabled': self.order_block_detector is not None
        }

# ‚úÖ Export de las clases principales
__all__ = [
    'SmartMoneyDetector', 'SmartMoneySignal', 'SmartMoneySignalType', 
    'MarketStructure', 'LiquidityType'
]

if __name__ == "__main__":
    # Test b√°sico del detector Smart Money
    print("üß† Smart Money Detector v6.1 - Test Mode")
    
    detector = SmartMoneyDetector()
    stats = detector.get_smart_money_stats()
    
    print(f"‚úÖ Smart Money Detector initialized:")
    print(f"   Health Integration: {stats['health_integration_enabled']}")
    print(f"   Order Block Confluence: {stats['order_block_confluence_enabled']}")
    print(f"   Market Structure: {stats['market_structure']}")
    print(f"   Detection Stats: {stats}")
    print("\nüöÄ Ready for Smart Money signal detection!")
