#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìã GU√çA DE PROTOCOLOS DE LOGGING CENTRAL - ICT ENGINE v6.0 ENTERPRISE
=====================================================================

Gu√≠a completa para implementar y mantener protocolos de logging centralizado
en todo el sistema ICT Engine v6.0 Enterprise.

Autor: ICT Engine v6.0 Team
Fecha: 13 Septiembre 2025
"""

# =====================================
# 1. IMPORTACI√ìN DE PROTOCOLOS
# =====================================

"""
PATR√ìN EST√ÅNDAR DE IMPORTACI√ìN:

```python
# Importar protocolos de logging central
try:
    from ..protocols import setup_module_logging, LogLevel, EnterpriseLoggerProtocol
    PROTOCOLS_AVAILABLE = True
except ImportError:
    PROTOCOLS_AVAILABLE = False
    setup_module_logging = None
    LogLevel = None

# Importar logging est√°ndar SIEMPRE
import logging

# Fallback tradicional SmartTradingLogger
try:
    from ..smart_trading_logger import SmartTradingLogger
    LOGGER_AVAILABLE = True
except ImportError:
    LOGGER_AVAILABLE = False
    SmartTradingLogger = None
```

IMPORTANTE: Siempre declara variables fallback como None para evitar "possibly unbound"
"""

# =====================================
# 2. INICIALIZACI√ìN EN __INIT__
# =====================================

"""
PATR√ìN DE INICIALIZACI√ìN DE LOGGER:

```python
def __init__(self, config=None):
    # ... otros par√°metros ...
    
    # Configurar logger usando protocolos centrales
    if PROTOCOLS_AVAILABLE and setup_module_logging and LogLevel:
        self.logger = setup_module_logging("ComponentName", LogLevel.INFO)
    elif LOGGER_AVAILABLE and SmartTradingLogger:
        self.logger = SmartTradingLogger("ComponentName")
    else:
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger("ComponentName")
    
    # Logging inicial seguro
    self._safe_log("info", "ComponentName inicializado")
```
"""

# =====================================
# 3. M√âTODO _safe_log OBLIGATORIO
# =====================================

"""
TODO M√ìDULO DEBE INCLUIR ESTE M√âTODO:

```python
def _safe_log(self, level: str, message: str):
    \"\"\"M√©todo seguro para logging con fallbacks\"\"\"
    try:
        if PROTOCOLS_AVAILABLE and setup_module_logging and LogLevel:
            getattr(self.logger, level)(message, "ComponentName")
        elif LOGGER_AVAILABLE and hasattr(self.logger, level):
            try:
                # Probar con 2 par√°metros (SmartTradingLogger)
                getattr(self.logger, level)(message, "ComponentName")
            except TypeError:
                # Fallback a 1 par√°metro (logging est√°ndar)
                getattr(self.logger, level)(f"[ComponentName] {message}")
        else:
            print(f"[{level.upper()}] [ComponentName] {message}")
    except Exception:
        print(f"[{level.upper()}] [ComponentName] {message}")
```
"""

# =====================================
# 4. USO EN M√âTODOS
# =====================================

"""
EN LUGAR DE:
- self.logger.info("mensaje") 
- self.logger.error("error", "component")

USA SIEMPRE:
- self._safe_log("info", "mensaje")
- self._safe_log("error", "error descripci√≥n")

EJEMPLO:
```python
def some_method(self):
    try:
        # L√≥gica del m√©todo
        self._safe_log("info", "Operaci√≥n completada exitosamente")
    except Exception as e:
        self._safe_log("error", f"Error en operaci√≥n: {e}")
```
"""

# =====================================
# 5. EVITAR "POSSIBLY UNBOUND"
# =====================================

"""
PROBLEMA COM√öN:
```python
# MALO - puede causar "possibly unbound"
try:
    data = get_some_data()
except Exception:
    pass

# Usar data aqu√≠ causa error
if data:  # ERROR: possibly unbound
    process_data(data)
```

SOLUCI√ìN:
```python
# BUENO - inicializar siempre antes del try
data = None  # o valor por defecto apropiado

try:
    data = get_some_data()
except Exception as e:
    self._safe_log("error", f"Error obteniendo data: {e}")
    data = default_data()  # valor fallback

# Ahora data est√° garantizado que existe
if data:
    process_data(data)
```
"""

# =====================================
# 6. ESTRUCTURA DE ARCHIVOS
# =====================================

"""
ESTRUCTURA REQUERIDA:

01-CORE/
‚îú‚îÄ‚îÄ protocols/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py                    # Exports de protocolos
‚îÇ   ‚îî‚îÄ‚îÄ logging_central_protocols.py   # Implementaci√≥n
‚îú‚îÄ‚îÄ component/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py                    # Exports con protocolo
‚îÇ   ‚îî‚îÄ‚îÄ component_module.py            # Usa protocolos
"""

# =====================================
# 7. EXPORTS EN __init__.py
# =====================================

"""
TODO __init__.py DEBE SEGUIR ESTE PATR√ìN:

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
\"\"\"
Module initialization following logging protocols.
\"\"\"

try:
    from .module_implementation import MainClass, HelperClass
    # Otras importaciones...
    
    __all__ = [
        'MainClass',
        'HelperClass',
        # Otros exports...
    ]
    
except ImportError as e:
    # Logging de error de importaci√≥n
    print(f"[WARNING] [ModuleName] Import error: {e}")
    __all__ = []
```
"""

# =====================================
# 8. VALIDACI√ìN Y TESTING
# =====================================

"""
SIEMPRE INCLUIR EN TESTING:

```python
def test_logging_integration():
    \"\"\"Test de integraci√≥n con protocolos de logging\"\"\"
    from protocols.logging_central_protocols import ProtocolValidator
    
    component = YourComponent()
    
    # Validar cumplimiento de protocolo
    is_compliant = ProtocolValidator.validate_logger_implementation(component.logger)
    assert is_compliant, "Logger no cumple con protocolos"
    
    # Test de logging
    component._safe_log("info", "Test message")
    component._safe_log("warning", "Test warning")
    component._safe_log("error", "Test error")
```
"""

# =====================================
# 9. CHECKLIST DE IMPLEMENTACI√ìN
# =====================================

"""
‚úÖ CHECKLIST OBLIGATORIO:

‚ñ° Importaci√≥n de protocolos con fallbacks
‚ñ° Variables fallback definidas como None
‚ñ° M√©todo _safe_log implementado
‚ñ° Inicializaci√≥n de logger en __init__
‚ñ° Uso exclusivo de _safe_log para logging
‚ñ° Variables inicializadas antes de try/except
‚ñ° __init__.py actualizado con exports
‚ñ° Tests de protocolos incluidos
‚ñ° Sin errores Pylance "possibly unbound"
‚ñ° Documentaci√≥n actualizada
"""

# =====================================
# 10. MIGRACI√ìN DE M√ìDULOS EXISTENTES
# =====================================

"""
PASOS PARA MIGRAR M√ìDULO EXISTENTE:

1. Agregar importaci√≥n de protocolos al inicio
2. Modificar __init__ para usar setup_module_logging
3. Agregar m√©todo _safe_log
4. Reemplazar todas las llamadas directas a logger
5. Inicializar variables antes de try/except
6. Actualizar __init__.py del paquete
7. Ejecutar tests y verificar sin errores Pylance
8. Documentar cambios realizados
"""

# =====================================
# 11. TROUBLESHOOTING COM√öN
# =====================================

"""
PROBLEMAS FRECUENTES Y SOLUCIONES:

1. "possibly unbound" en variables:
   - Inicializar SIEMPRE antes del try/except
   - Usar valores por defecto apropiados

2. "Argument missing for parameter 'component'":
   - Usar _safe_log en lugar de logger directo
   - Verificar que SmartTradingLogger est√© correctamente importado

3. Imports no resueltos:
   - Verificar estructura de carpetas
   - Actualizar __init__.py con exports correctos
   - Usar importaciones relativas apropiadas

4. Logger no funciona:
   - Verificar disponibilidad de protocolos
   - Confirmar fallbacks configurados
   - Revisar inicializaci√≥n en __init__
"""

print("üìã Gu√≠a de Protocolos de Logging Central - ICT Engine v6.0")
print("Usar esta gu√≠a para mantener consistencia en todo el sistema")
print("Actualizado: 13 Septiembre 2025")