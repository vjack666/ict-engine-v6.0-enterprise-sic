#!/usr/bin/env python3
"""
üì° MT5 DATA MANAGER v6.0 ENTERPRISE - ICT ENGINE SIC
===================================================

Gestor centralizado y fundamental para todas las operaciones de MetaTrader5
integrado completamente con SIC v3.1 Enterprise.

üèÜ POSICI√ìN: COMPONENTE FUNDAMENTAL #1 - SIN ESTE NO FUNCIONA NADA

Caracter√≠sticas v6.0 Enterprise:
- Integraci√≥n nativa con SIC v3.1 Enterprise
- Lazy loading de MetaTrader5 y pandas  
- Cache predictivo de datos hist√≥ricos
- Debug avanzado con AdvancedDebugger
- Conexi√≥n EXCLUSIVA a FTMO Global Markets MT5
- Validaci√≥n de seguridad robusta
- Monitoreo en tiempo real

Funcionalidades Core:
- Conexi√≥n segura SOLO a FTMO Global Markets MT5
- Descarga de datos hist√≥ricos optimizada
- Gesti√≥n de ticks en tiempo real
- Validaci√≥n de cuenta y permisos
- Manejo robusto de errores con diagn√≥stico

Autor: ICT Engine v6.1.0 Enterprise Team
Versi√≥n: v6.1.0-enterprise
Fecha: Agosto 2025
Prioridad: CR√çTICA - COMPONENTE FUNDAMENTAL
"""

# ===============================
# IMPORTS FUNDAMENTALES SIC v3.1
# ===============================

import sys
import os
import time
import threading
from typing import Dict, List, Optional, Any, Union, Set
from datetime import datetime, timedelta
from pathlib import Path
from dataclasses import dataclass, field
from enum import Enum

# Imports SIC v3.1 Enterprise (usando try/except para desarrollo)
try:
    from sistema.sic_v3_1.enterprise_interface import SICEnterpriseInterface  # type: ignore
    from sistema.sic_v3_1.advanced_debug import AdvancedDebugger  # type: ignore
    SIC_V3_1_AVAILABLE = True
except ImportError:
    SIC_V3_1_AVAILABLE = False
    # Fallback para desarrollo
    class SICEnterpriseInterface:
        def __init__(self): pass
        def smart_import(self, module_name): return None
        def get_lazy_loading_manager(self): return None
        def get_predictive_cache_manager(self): return None
        def log_info(self, *args, **kwargs): pass
        def log_error(self, *args, **kwargs): pass
        def log_warning(self, *args, **kwargs): pass
    
    class AdvancedDebugger:
        def __init__(self, config=None): pass
        def log_import_debug(self, *args, **kwargs): pass
        def diagnose_import_problem(self, *args, **kwargs): pass
        def get_debug_summary(self): return {'debug_stats': {'total_events': 0}}
        def save_session_log(self, *args, **kwargs): pass

# Importaci√≥n segura de MT5 con lazy loading
MT5_AVAILABLE = False
mt5 = None

try:
    import MetaTrader5 as mt5_module  # type: ignore
    mt5 = mt5_module
    MT5_AVAILABLE = True
except ImportError:
    MT5_AVAILABLE = False
    mt5 = None

# El SIC v3.1 gestionar√° pandas de forma inteligente
sic = SICEnterpriseInterface()

# Configurar debugging avanzado
debugger = AdvancedDebugger({
    'debug_level': 'info',
    'enable_detailed_logging': True,
    'max_events': 1000
})

# ===============================
# CONFIGURACI√ìN FTMO GLOBAL MARKETS
# ===============================

# Configuraci√≥n espec√≠fica y EXCLUSIVA para FTMO Global Markets MT5
FTMO_MT5_PATH = r"C:\Program Files\FTMO Global Markets MT5 Terminal\terminal64.exe"

FTMO_CONFIG = {
    "executable_path": FTMO_MT5_PATH,
    "max_bars": 50000,
    "symbols": ["EURUSD", "GBPUSD", "USDJPY", "USDCHF", "AUDUSD", "USDCAD", "XAUUSD", "XAGUSD"],
    "timeframes": ["M1", "M3", "M5", "M15", "H1", "H4", "D1"],
    "magic_number": 20250814,  # Actualizado para FTMO 
    "security_level": "MAXIMUM",
    "version": "v6.0-enterprise-ftmo"
}

# Configuraci√≥n de timeframes optimizada
TIMEFRAME_MAPPING = {
    'M1': 1,
    'M3': 3,
    'M5': 5,
    'M15': 15,
    'H1': 16385,
    'H4': 16388,
    'D1': 16408
}

# ===============================
# TIPOS Y ENUMS
# ===============================

class AccountType(Enum):
    """Tipos de cuenta MT5"""
    DEMO = "DEMO"
    REAL = "REAL"
    CONTEST = "CONTEST"
    FUNDING = "FUNDING"
    UNKNOWN = "UNKNOWN"

@dataclass
class MT5ConnectionInfo:
    """Informaci√≥n de conexi√≥n MT5"""
    is_connected: bool = False
    terminal_path: str = ""
    terminal_name: str = ""
    company: str = ""
    account_number: int = 0
    account_type: AccountType = AccountType.UNKNOWN
    server: str = ""
    connection_time: Optional[datetime] = None
    
    # Nuevos campos v6.0
    sic_integration: bool = True  # Habilitado por defecto en v6.0
    lazy_loading_enabled: bool = False
    cache_enabled: bool = False
    debug_level: str = "info"

@dataclass
class MT5TickData:
    """Datos de tick optimizados"""
    symbol: str
    bid: float
    ask: float
    last: float
    volume: int
    time: int
    flags: int
    volume_real: float = 0.0
    
    # Nuevos campos v6.0
    spread: float = field(init=False)
    mid_price: float = field(init=False)
    timestamp: datetime = field(init=False)
    
    def __post_init__(self):
        self.spread = self.ask - self.bid
        self.mid_price = (self.bid + self.ask) / 2
        self.timestamp = datetime.fromtimestamp(self.time)

@dataclass 
class MT5HistoricalData:
    """Datos hist√≥ricos con metadatos"""
    symbol: str
    timeframe: str
    data: Any  # pandas DataFrame (lazy loaded)
    bars_count: int
    download_time: datetime
    
    # Nuevos campos v6.0
    cache_key: str = ""
    from_cache: bool = False
    processing_time: float = 0.0
    sic_stats: Dict[str, Any] = field(default_factory=dict)
    
    def __len__(self) -> int:
        """Retorna el n√∫mero de barras/registros"""
        if self.data is not None and hasattr(self.data, '__len__'):
            return len(self.data)
        return self.bars_count
    
    def __bool__(self) -> bool:
        """Retorna True si contiene datos v√°lidos"""
        return self.data is not None and len(self) > 0
    
    def to_dataframe(self) -> Any:
        """Retorna los datos como DataFrame"""
        return self.data
    
    @property
    def empty(self) -> bool:
        """Retorna True si no hay datos"""
        return self.data is None or len(self) == 0

# ===============================
# FUNCIONES DE VALIDACI√ìN
# ===============================

def validate_ftmo_installation() -> bool:
    """
    üîí Valida que el terminal FTMO Global Markets est√© instalado EXCLUSIVAMENTE.
    SEGURIDAD M√ÅXIMA: Solo permite el uso del terminal FTMO Global Markets.
    """
    if not os.path.exists(FTMO_MT5_PATH):
        return False
    if not os.path.isfile(FTMO_MT5_PATH):
        return False

    # Verificaci√≥n adicional del nombre del archivo
    if "ftmo" not in FTMO_MT5_PATH.lower():
        return False

    return True

def ensure_only_ftmo_connection() -> bool:
    """
    üõ°Ô∏è Garantiza que solo se use el terminal FTMO Global Markets MT5.
    Desconecta cualquier otra conexi√≥n MT5 activa.
    """
    if not MT5_AVAILABLE or mt5 is None:
        return False

    try:
        # Verificar si hay alguna conexi√≥n activa
        if hasattr(mt5, 'terminal_info'):
            terminal_info = mt5.terminal_info()  # type: ignore
            if terminal_info:
                terminal_path = str(terminal_info.path).lower()
                if "ftmo" not in terminal_path:
                    # Hay una conexi√≥n a un terminal que NO es FTMO Global Markets
                    _log_warning(f"üö® TERMINAL INCORRECTO DETECTADO: {terminal_info.path}")
                    _log_warning("üîí Desconectando terminal no autorizado...")
                    mt5.shutdown()  # type: ignore
                    return False
                else:
                    _log_info("‚úÖ Terminal FTMO Global Markets verificado como activo")
                    return True
    except Exception as e:
        _log_error(f"Error verificando terminal activo: {e}")

    return False

# ===============================
# CLASE PRINCIPAL MT5DATAMANAGER
# ===============================

class MT5DataManager:
    """
    üì° GESTOR FUNDAMENTAL MT5 v6.0 ENTERPRISE
    ========================================
    
    EL COMPONENTE M√ÅS CR√çTICO del ICT Engine v6.1.0 Enterprise.
    Sin este gestor, NING√öN otro componente puede funcionar.
    
    üî• **Caracter√≠sticas Enterprise:**
    - Integraci√≥n nativa con SIC v3.1 
    - Lazy loading inteligente de dependencias
    - Cache predictivo de datos hist√≥ricos
    - Debug avanzado con an√°lisis de dependencias
    - Conexi√≥n EXCLUSIVA a FTMO Global Markets MT5
    - Validaci√≥n de seguridad de nivel enterprise
    - Monitoreo en tiempo real de conexiones
    - Gesti√≥n optimizada de memoria y performance
    
    üõ°Ô∏è **Seguridad:**
    - SOLO permite conexi√≥n a FTMO Global Markets MT5
    - Validaci√≥n continua de terminal correcto
    - Desconexi√≥n autom√°tica de terminales no autorizados
    - Logging completo de actividad de seguridad
    
    ‚ö° **Performance:**
    - Cache inteligente de datos frecuentes
    - Lazy loading de pandas y MT5
    - Pooling optimizado de conexiones
    - Gesti√≥n eficiente de memoria
    """

    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        üèóÔ∏è Inicializa el MT5DataManager v6.0 Enterprise
        
        Args:
            config: Configuraci√≥n avanzada del manager
        """
        
        # Configuraci√≥n v6.0
        self._config = config or {}
        self._enable_debug = self._config.get('enable_debug', True)
        self._use_predictive_cache = self._config.get('use_predictive_cache', True)
        self._enable_lazy_loading = self._config.get('enable_lazy_loading', True)
        self._security_level = self._config.get('security_level', 'MAXIMUM')
        
        # Estado de conexi√≥n
        self.connection_info = MT5ConnectionInfo()
        self.is_connected = False
        self.available_functions = {}
        
        # Componentes SIC v3.1
        self._lazy_modules = {}
        self._cache_manager = None
        self._pandas_module = None
        
        # Account management
        self._account_validator = None
        self.account_type = AccountType.UNKNOWN
        self.account_config = None
        
        # Performance y estad√≠sticas
        self._performance_metrics = []
        self._connection_attempts = 0
        self._successful_downloads = 0
        self._cache_hits = 0
        self._cache_misses = 0
        
        # Threading para operaciones as√≠ncronas
        self._lock = threading.Lock()
        
        # Inicializar integraci√≥n SIC v3.1
        self._initialize_sic_integration()
        
        # Verificaci√≥n de seguridad inicial
        self._initial_security_check()
        
        # Check MT5 availability
        self._check_mt5_availability()
        
        _log_info("üöÄ MT5DataManager v6.0 Enterprise inicializado - COMPONENTE FUNDAMENTAL #1")

    def _initialize_sic_integration(self):
        """üîß Inicializa la integraci√≥n completa con SIC v3.1 Enterprise"""
        try:
            # Configurar lazy loading para m√≥dulos pesados
            if self._enable_lazy_loading:
                self._setup_lazy_modules()
            
            # Configurar cache predictivo
            if self._use_predictive_cache:
                self._setup_predictive_cache()
            
            # Configurar debugging avanzado
            if self._enable_debug:
                debugger.log_import_debug(
                    module_name='mt5_data_manager',
                    import_type='enterprise',
                    operation='initialize_sic',
                    duration=0.001,
                    success=True,
                    details={
                        'version': 'v6.0-enterprise', 
                        'sic_version': 'v3.1',
                        'component_priority': 'FUNDAMENTAL_#1'
                    }
                )
            
            # Marcar integraci√≥n como activa
            self.connection_info.sic_integration = True
            self.connection_info.lazy_loading_enabled = self._enable_lazy_loading
            self.connection_info.cache_enabled = self._use_predictive_cache
            self.connection_info.debug_level = getattr(debugger, "_debug_level", "INFO")  # type: ignore
            
            _log_info("‚úÖ Integraci√≥n SIC v3.1 configurada - MT5DataManager preparado")
            
        except Exception as e:
            _log_error(f"Error configurando integraci√≥n SIC: {e}")
            if self._enable_debug:
                debugger.diagnose_import_problem('sic_mt5_integration', e)

    def _setup_lazy_modules(self):
        """‚ö° Configura lazy loading para m√≥dulos pesados"""
        try:
            # pandas es cr√≠tico pero pesado, cargarlo lazy
            if hasattr(sic, 'get_lazy_loading_manager'):
                lazy_manager = sic.get_lazy_loading_manager()
                if lazy_manager:
                    self._lazy_modules['pandas'] = lazy_manager.lazy_import('pandas')
                    _log_info("üì¶ Pandas configurado para lazy loading")
            
            # Account validator tambi√©n lazy
            if hasattr(sic, 'smart_import'):
                self._lazy_modules['account_validator'] = sic.smart_import('config.live_account_validator')
            
            _log_info(f"‚ö° Lazy loading configurado: {len(self._lazy_modules)} m√≥dulos")
            
        except Exception as e:
            _log_error(f"Error configurando lazy loading: {e}")

    def _setup_predictive_cache(self):
        """üîÆ Configura cache predictivo para datos MT5"""
        try:
            if hasattr(sic, 'get_predictive_cache_manager'):
                self._cache_manager = sic.get_predictive_cache_manager()
                
                if self._cache_manager:
                    # Pre-cachear configuraciones comunes de trading
                    common_requests = [
                        {'symbol': 'EURUSD', 'timeframe': 'M1', 'count': 1000},
                        {'symbol': 'EURUSD', 'timeframe': 'M5', 'count': 500},
                        {'symbol': 'GBPUSD', 'timeframe': 'M1', 'count': 1000},
                        {'symbol': 'XAUUSD', 'timeframe': 'M15', 'count': 200},
                    ]
                    
                    for request in common_requests:
                        cache_key = f"mt5_historical_{hash(str(request))}"
                        self._cache_manager.predict_and_cache(cache_key, request)
                    
                    _log_info(f"üîÆ Cache predictivo configurado: {len(common_requests)} patrones")
            
        except Exception as e:
            _log_error(f"Error configurando cache predictivo: {e}")

    def _initial_security_check(self):
        """üõ°Ô∏è Verificaci√≥n de seguridad inicial cr√≠tica"""
        try:
            # Verificar que SOLO est√© disponible FTMO Global Markets
            if not validate_ftmo_installation():
                _log_error("üö® CR√çTICO: FTMO Global Markets MT5 no encontrado en ubicaci√≥n esperada")
                _log_error(f"üö® Ruta requerida: {FTMO_MT5_PATH}")
                return False
            
            # Verificar que no haya conexiones a otros terminales
            if not ensure_only_ftmo_connection():
                _log_warning("‚ö†Ô∏è Se detectaron terminales MT5 no autorizados - Sistema en modo seguro")
            
            _log_info("‚úÖ Verificaci√≥n de seguridad inicial completada")
            return True
            
        except Exception as e:
            _log_error(f"‚ùå Error en verificaci√≥n de seguridad: {e}")
            return False

    def _check_mt5_availability(self) -> None:
        """üîç Verifica qu√© funciones de MT5 est√°n disponibles"""
        if not MT5_AVAILABLE or mt5 is None:
            _log_error("‚ùå MetaTrader5 no est√° disponible en el sistema")
            return

        # Lista de funciones cr√≠ticas de MT5
        critical_functions = [
            'initialize', 'shutdown', 'copy_rates_from_pos', 'copy_rates_from',
            'symbol_info_tick', 'symbols_get', 'account_info', 'terminal_info',
            'symbol_info', 'symbol_select'
        ]

        available_count = 0
        for func_name in critical_functions:
            is_available = hasattr(mt5, func_name)
            self.available_functions[func_name] = is_available
            if is_available:
                available_count += 1

        _log_info(f"üìä MT5 Functions: {available_count}/{len(critical_functions)} disponibles")
        
        if available_count < len(critical_functions):
            missing = [f for f, available in self.available_functions.items() if not available]
            _log_warning(f"‚ö†Ô∏è Funciones MT5 faltantes: {missing}")

    def connect(self) -> bool:
        """
        üîó Conecta EXCLUSIVAMENTE al terminal FTMO Global Markets MT5
        
        SEGURIDAD M√ÅXIMA: NUNCA permite conexi√≥n a otros terminales MT5.
        
        Returns:
            bool: True si la conexi√≥n es exitosa y segura
        """
        start_time = time.time()
        self._connection_attempts += 1
        
        if not MT5_AVAILABLE or mt5 is None:
            _log_error("‚ùå MetaTrader5 no est√° disponible")
            return False

        if not validate_ftmo_installation():
            _log_error(f"‚ùå Terminal FTMO Global Markets MT5 no encontrado en: {FTMO_MT5_PATH}")
            _log_error("üö® SEGURIDAD: Solo se permite conexi√≥n a FTMO Global Markets MT5")
            return False

        try:
            # üîí VERIFICACI√ìN DE SEGURIDAD: Desconectar cualquier terminal previo
            try:
                if hasattr(mt5, 'shutdown'):
                    mt5.shutdown()  # type: ignore
                    _log_info("üîí Desconectado cualquier terminal MT5 previo")
            except Exception:
                pass

            if self.available_functions.get('initialize', False):
                _log_info(f"üîó Conectando EXCLUSIVAMENTE a FTMO Global Markets MT5")
                _log_info(f"üìÅ Ruta obligatoria: {FTMO_MT5_PATH}")

                # üõ°Ô∏è CONEXI√ìN EXCLUSIVA con ruta espec√≠fica de FTMO Global Markets
                self.is_connected = mt5.initialize(path=FTMO_MT5_PATH)  # type: ignore

                if self.is_connected:
                    # üîç VALIDACI√ìN CR√çTICA: Verificar que estamos conectados al terminal correcto
                    if not self._verify_ftmo_connection():
                        _log_error("üö® ALERTA: No se conect√≥ al terminal FTMO Global Markets correcto")
                        self.disconnect()
                        return False

                    # Actualizar informaci√≥n de conexi√≥n
                    self._update_connection_info()
                    
                    # Validar tipo de cuenta despu√©s de conectar
                    self._validate_account_type()

                    # Registrar m√©tricas de conexi√≥n
                    connection_duration = time.time() - start_time
                    self._performance_metrics.append({
                        'operation': 'connect',
                        'duration': connection_duration,
                        'success': True,
                        'timestamp': time.time(),
                        'attempt_number': self._connection_attempts
                    })

                    # Debug avanzado
                    if self._enable_debug:
                        debugger.log_import_debug(
                            module_name='mt5_data_manager',
                            import_type='enterprise',
                            operation='connect',
                            duration=connection_duration,
                            success=True,
                            details={
                                'terminal_path': FTMO_MT5_PATH,
                                'connection_attempt': self._connection_attempts,
                                'account_type': self.account_type.value,
                                'security_verified': True
                            }
                        )

                    _log_info("‚úÖ CONEXI√ìN SEGURA ESTABLECIDA - Solo FTMO Global Markets MT5")
                    return True
                else:
                    _log_error("‚ùå Error al conectar con FTMO Global Markets MT5")
                    
                    # Debug de error
                    if self._enable_debug:
                        debugger.log_import_debug(
                            module_name='mt5_data_manager',
                            import_type='enterprise',
                            operation='connect',
                            duration=time.time() - start_time,
                            success=False,
                            details={'error': 'MT5 initialize failed'}
                        )

        except Exception as e:
            _log_error(f"‚ùå Error de conexi√≥n MT5: {e}")
            
            # Debug de excepci√≥n
            if self._enable_debug:
                debugger.diagnose_import_problem('mt5_connection', e)

        return False

    def _verify_ftmo_connection(self) -> bool:
        """
        üîç Verifica que estamos conectados espec√≠ficamente al terminal FTMO Global Markets
        
        Returns:
            True si la conexi√≥n es al terminal FTMO Global Markets correcto
        """
        try:
            terminal_info = mt5.terminal_info()  # type: ignore
            if terminal_info:
                terminal_path = str(terminal_info.path).lower()
                expected_path = FTMO_MT5_PATH.lower()

                # Verificar que la ruta coincida con FTMO Global Markets
                if "ftmo" in terminal_path or terminal_path == expected_path:
                    _log_info(f"‚úÖ Verificado: Conectado a FTMO Global Markets MT5")
                    _log_info(f"   Terminal: {terminal_info.name}")
                    _log_info(f"   Empresa: {terminal_info.company}")
                    _log_info(f"   Ruta: {terminal_info.path}")
                    
                    # Actualizar informaci√≥n de conexi√≥n
                    self.connection_info.terminal_path = str(terminal_info.path)
                    self.connection_info.terminal_name = str(terminal_info.name)
                    self.connection_info.company = str(terminal_info.company)
                    
                    return True
                else:
                    _log_error(f"üö® TERMINAL INCORRECTO: {terminal_info.path}")
                    _log_error(f"üö® SE ESPERABA: {FTMO_MT5_PATH}")
                    return False
            else:
                _log_error("‚ùå No se pudo obtener informaci√≥n del terminal")
                return False
                
        except Exception as e:
            _log_error(f"‚ùå Error verificando terminal: {e}")
            return False

    def _update_connection_info(self):
        """üìä Actualiza la informaci√≥n de conexi√≥n"""
        try:
            self.connection_info.is_connected = True
            self.connection_info.connection_time = datetime.now()
            
            # Obtener informaci√≥n de cuenta
            if hasattr(mt5, 'account_info'):
                account_info = mt5.account_info()  # type: ignore
                if account_info:
                    self.connection_info.account_number = account_info.login
                    self.connection_info.server = account_info.server
                    
                    # Determinar tipo de cuenta
                    trade_mode = account_info.trade_mode
                    if trade_mode == 0:
                        self.connection_info.account_type = AccountType.DEMO
                    elif trade_mode == 1:
                        self.connection_info.account_type = AccountType.CONTEST
                    elif trade_mode == 2:
                        self.connection_info.account_type = AccountType.REAL
                    else:
                        self.connection_info.account_type = AccountType.UNKNOWN
            
        except Exception as e:
            _log_error(f"Error actualizando informaci√≥n de conexi√≥n: {e}")

    def _validate_account_type(self) -> None:
        """üîç Valida el tipo de cuenta despu√©s de conectar"""
        try:
            # Obtener validador de cuenta de forma lazy
            if not self._account_validator:
                if 'account_validator' in self._lazy_modules:
                    validator_module = self._lazy_modules['account_validator']
                    if validator_module:
                        self._account_validator = validator_module.get_account_validator()

            if self._account_validator:
                account_type, account_data = self._account_validator.detect_account_type()
                self.account_type = account_type
                self.account_config = self._account_validator.get_live_trading_config()

                # Log del tipo de cuenta detectado
                if account_type == AccountType.DEMO:
                    _log_info("üî∂ CUENTA DEMO detectada - Usando datos REALES de mercado para trading simulado")
                elif account_type == AccountType.REAL:
                    _log_info("üí∞ CUENTA REAL detectada - Usando datos REALES de mercado para trading en vivo")
                elif account_type == AccountType.CONTEST:
                    _log_info("üèÜ CUENTA DE FONDEO detectada - Usando datos REALES de mercado con reglas de evaluaci√≥n")
                else:
                    _log_warning("‚ùì TIPO DE CUENTA DESCONOCIDO")

                # Mensaje clarificatorio sobre datos de mercado
                _log_info("üìä CONFIRMACI√ìN: TODOS los datos de mercado son REALES desde MT5")
                _log_info("üîç El sistema NUNCA simula precios - Solo obtiene datos directos del broker")

            else:
                _log_warning("‚ö†Ô∏è Validador de cuenta no disponible")
                # Fallback: usar informaci√≥n b√°sica de MT5
                account_info = mt5.account_info()  # type: ignore
                if account_info:
                    trade_modes = {0: AccountType.DEMO, 1: AccountType.CONTEST, 2: AccountType.REAL}
                    self.account_type = trade_modes.get(account_info.trade_mode, AccountType.UNKNOWN)

        except Exception as e:
            _log_error(f"‚ùå Error validando tipo de cuenta: {e}")
            self.account_type = AccountType.UNKNOWN

    def get_symbol_tick(self, symbol: str) -> Optional[MT5TickData]:
        """
        üìä Obtiene el tick actual de un s√≠mbolo de forma optimizada
        
        Args:
            symbol: S√≠mbolo a consultar (ej: "EURUSD")
            
        Returns:
            MT5TickData con informaci√≥n del tick o None si falla
        """
        if not MT5_AVAILABLE or mt5 is None:
            _log_error(f"MT5 no disponible para obtener tick de {symbol}")
            return None

        if not self.is_connected:
            _log_warning(f"MT5 no conectado para obtener tick de {symbol}")
            return None

        start_time = time.time()
        
        try:
            # Verificar que la funci√≥n est√© disponible
            if not hasattr(mt5, 'symbol_info_tick'):
                _log_error("Funci√≥n symbol_info_tick no disponible en MT5")
                return None

            tick = mt5.symbol_info_tick(symbol)  # type: ignore
            if tick is None:
                _log_warning(f"No se pudo obtener tick para {symbol}")
                return None

            # Crear objeto optimizado
            tick_data = MT5TickData(
                symbol=symbol,
                bid=tick.bid,
                ask=tick.ask,
                last=tick.last,
                volume=tick.volume,
                time=tick.time,
                flags=tick.flags,
                volume_real=getattr(tick, 'volume_real', 0.0)
            )

            # Registrar m√©tricas
            duration = time.time() - start_time
            self._performance_metrics.append({
                'operation': 'get_tick',
                'symbol': symbol,
                'duration': duration,
                'success': True,
                'timestamp': time.time()
            })

            # Debug detallado si est√° habilitado
            if self._enable_debug:
                debugger.log_import_debug(
                    module_name='mt5_data_manager',
                    import_type='enterprise',
                    operation='get_tick',
                    duration=duration,
                    success=True,
                    details={
                        'symbol': symbol,
                        'bid': tick.bid,
                        'ask': tick.ask,
                        'spread': tick_data.spread
                    }
                )

            return tick_data

        except Exception as e:
            _log_error(f"Error obteniendo tick para {symbol}: {e}")
            
            # Debug de error
            if self._enable_debug:
                debugger.diagnose_import_problem(f'get_tick_{symbol}', e)
                
            return None

    def get_historical_data(self, 
                          symbol: str, 
                          timeframe: str, 
                          count: int = 1000,
                          force_download: bool = False) -> Optional[MT5HistoricalData]:
        """
        üìà Descarga datos hist√≥ricos con cache inteligente y lazy loading
        
        Args:
            symbol: S√≠mbolo a descargar
            timeframe: Timeframe de las velas
            count: N√∫mero de velas
            force_download: Forzar descarga sin usar cache
            
        Returns:
            MT5HistoricalData con los datos o None si falla
        """
        start_time = time.time()
        
        # Generar clave de cache
        cache_key = f"mt5_hist_{symbol}_{timeframe}_{count}"
        
        # Verificar cache si no se fuerza descarga
        if not force_download and self._use_predictive_cache and self._cache_manager:
            try:
                cached_data = self._cache_manager.get_cached_prediction(cache_key)
                if cached_data:
                    self._cache_hits += 1
                    _log_info(f"üì¶ Cache hit para {symbol} {timeframe}")
                    
                    return MT5HistoricalData(
                        symbol=symbol,
                        timeframe=timeframe,
                        data=cached_data,
                        bars_count=len(cached_data) if cached_data is not None else 0,
                        download_time=datetime.now(),
                        cache_key=cache_key,
                        from_cache=True,
                        processing_time=time.time() - start_time
                    )
            except Exception as e:
                _log_warning(f"Error accediendo cache: {e}")

        # Cache miss o descarga forzada
        self._cache_misses += 1
        
        if not MT5_AVAILABLE or mt5 is None:
            _log_error(f"MT5 no disponible para descargar {symbol}")
            return None

        if not self.is_connected:
            _log_error(f"MT5 no conectado para descargar {symbol}")
            return None

        try:
            # Verificar s√≠mbolo
            if not self._verify_symbol(symbol):
                _log_error(f"S√≠mbolo {symbol} no v√°lido o no disponible")
                return None

            # Obtener timeframe constant
            tf_constant = self.get_timeframe_constant(timeframe)
            if tf_constant is None:
                _log_error(f"Timeframe {timeframe} no v√°lido")
                return None

            # Obtener pandas de forma lazy
            pd = self._get_pandas_lazy()
            if pd is None:
                _log_error("No se pudo cargar pandas")
                return None

            # Descargar datos de MT5
            _log_info(f"üì• Descargando {symbol} {timeframe} ({count} velas)...")
            
            rates = mt5.copy_rates_from_pos(symbol, tf_constant, 0, count)  # type: ignore
            if rates is None or len(rates) == 0:
                _log_error(f"No se pudieron obtener datos para {symbol} {timeframe}")
                return None

            # Convertir a DataFrame
            df = pd.DataFrame(rates)
            df['time'] = pd.to_datetime(df['time'], unit='s')
            df.set_index('time', inplace=True)
            
            # Calcular m√©tricas de descarga
            download_duration = time.time() - start_time
            self._successful_downloads += 1
            
            # Crear objeto de resultado
            historical_data = MT5HistoricalData(
                symbol=symbol,
                timeframe=timeframe,
                data=df,
                bars_count=len(df),
                download_time=datetime.now(),
                cache_key=cache_key,
                from_cache=False,
                processing_time=download_duration,
                sic_stats={
                    'download_duration': download_duration,
                    'cache_hit': False,
                    'lazy_loading': self._enable_lazy_loading,
                    'bars_downloaded': len(df)
                }
            )

            # Guardar en cache si est√° habilitado
            if self._use_predictive_cache and self._cache_manager:
                try:
                    self._cache_manager.predict_and_cache(cache_key, df)
                    _log_info(f"üíæ Datos guardados en cache: {cache_key}")
                except Exception as e:
                    _log_warning(f"Error guardando en cache: {e}")

            # Registrar m√©tricas de performance
            self._performance_metrics.append({
                'operation': 'get_historical_data',
                'symbol': symbol,
                'timeframe': timeframe,
                'bars_count': len(df),
                'duration': download_duration,
                'success': True,
                'from_cache': False,
                'timestamp': time.time()
            })

            # Debug detallado
            if self._enable_debug:
                debugger.log_import_debug(
                    module_name='mt5_data_manager',
                    import_type='enterprise',
                    operation='get_historical_data',
                    duration=download_duration,
                    success=True,
                    details={
                        'symbol': symbol,
                        'timeframe': timeframe,
                        'bars_count': len(df),
                        'from_cache': False,
                        'cache_key': cache_key
                    }
                )

            _log_info(f"‚úÖ Descarga completada: {symbol} {timeframe} ({len(df)} velas, {download_duration:.3f}s)")
            return historical_data

        except Exception as e:
            _log_error(f"Error descargando datos hist√≥ricos {symbol} {timeframe}: {e}")
            
            # Debug de error
            if self._enable_debug:
                debugger.diagnose_import_problem(f'historical_data_{symbol}_{timeframe}', e)
            
            return None

    def _get_pandas_lazy(self):
        """üêº Obtiene pandas con gesti√≥n thread-safe (ThreadSafePandasManager)"""
        try:
            from data_management.advanced_candle_downloader import _pandas_manager
            return _pandas_manager.get_safe_pandas_instance()
        except ImportError:
            _log_error("‚ùå ThreadSafePandasManager no est√° disponible")
            return None

    def _verify_symbol(self, symbol: str) -> bool:
        """‚úÖ Verifica si un s√≠mbolo est√° disponible en MT5"""
        if not MT5_AVAILABLE or mt5 is None:
            return False

        if not self.is_connected:
            return False

        try:
            # Obtener informaci√≥n del s√≠mbolo
            info = mt5.symbol_info(symbol)  # type: ignore
            if info is None:
                _log_error(f"S√≠mbolo {symbol} no encontrado en MT5")
                return False

            # Verificar si el s√≠mbolo est√° visible/habilitado
            if not info.visible:
                _log_warning(f"S√≠mbolo {symbol} no visible, intentando habilitarlo...")
                if not mt5.symbol_select(symbol, True):  # type: ignore
                    _log_error(f"No se pudo habilitar el s√≠mbolo {symbol}")
                    return False

            return True

        except Exception as e:
            _log_error(f"Error verificando s√≠mbolo {symbol}: {e}")
            return False

    def get_timeframe_constant(self, timeframe: str) -> Optional[int]:
        """‚è∞ Obtiene la constante de timeframe de MT5"""
        if not MT5_AVAILABLE or mt5 is None:
            return None

        try:
            # Primero intentar con el mapeo directo
            if timeframe in TIMEFRAME_MAPPING:
                tf_value = TIMEFRAME_MAPPING[timeframe]
                if tf_value < 100:  # Es un timeframe en minutos
                    return getattr(mt5, f'TIMEFRAME_{timeframe}', None)
                else:  # Es una constante directa
                    return tf_value

            # Si no existe, intentar obtenerlo directamente
            return getattr(mt5, f'TIMEFRAME_{timeframe}', None)
            
        except Exception:
            return None

    def get_account_info(self) -> Dict[str, Any]:
        """
        üë§ Obtiene informaci√≥n completa de la cuenta desde MT5
        
        Returns:
            Diccionario con informaci√≥n de la cuenta MT5
        """
        if not MT5_AVAILABLE or mt5 is None:
            return {"error": "MT5 no disponible"}

        if not self.is_connected:
            return {"error": "MT5 no conectado"}

        try:
            # Obtener informaci√≥n de cuenta directamente de MT5
            account_info = mt5.account_info()  # type: ignore
            if account_info is None:
                return {"error": "No se pudo obtener informaci√≥n de la cuenta"}

            # Convertir a diccionario con toda la informaci√≥n
            account_data = {
                "login": account_info.login,
                "trade_mode": account_info.trade_mode,
                "name": account_info.name,
                "server": account_info.server,
                "currency": account_info.currency,
                "balance": account_info.balance,
                "credit": account_info.credit,
                "profit": account_info.profit,
                "equity": account_info.equity,
                "margin": account_info.margin,
                "margin_free": account_info.margin_free,
                "margin_level": account_info.margin_level,
                "company": account_info.company,
                "broker": account_info.company,  # Alias para compatibilidad
                "leverage": account_info.leverage,
                "trade_allowed": account_info.trade_allowed,
                "trade_expert": account_info.trade_expert,
                "margin_so_mode": account_info.margin_so_mode,
                "margin_so_call": account_info.margin_so_call,
                "margin_so_so": account_info.margin_so_so,
                "currency_digits": account_info.currency_digits,
                "fifo_close": account_info.fifo_close,
                
                # Informaci√≥n adicional v6.0
                "account_type": self.account_type.value,
                "connection_info": {
                    "terminal_path": self.connection_info.terminal_path,
                    "terminal_name": self.connection_info.terminal_name,
                    "company": self.connection_info.company,
                    "connection_time": self.connection_info.connection_time.isoformat() if self.connection_info.connection_time else None,
                    "sic_integration": self.connection_info.sic_integration
                }
            }

            return account_data

        except Exception as e:
            _log_error(f"Error obteniendo informaci√≥n de cuenta MT5: {e}")
            return {"error": f"Error: {e}"}

    def disconnect(self) -> None:
        """üîå Desconecta de MetaTrader5 con cleanup completo"""
        if self.is_connected and self.available_functions.get('shutdown', False):
            try:
                mt5.shutdown()  # type: ignore
                self.is_connected = False
                self.connection_info.is_connected = False
                
                # Guardar sesi√≥n de debug si est√° habilitado
                if self._enable_debug:
                    debugger.save_session_log(f"mt5_session_{int(time.time())}.json")
                
                _log_info("üîå Desconectado de MT5 - Cleanup completado")
                
            except Exception as e:
                _log_error(f"Error durante desconexi√≥n: {e}")

    def get_status(self) -> Dict[str, Any]:
        """üìä Obtiene estado completo del MT5DataManager v6.0"""
        with self._lock:
            status = {
                # Estado b√°sico
                'is_connected': self.is_connected,
                'mt5_available': MT5_AVAILABLE,
                'account_type': self.account_type.value,
                'connection_attempts': self._connection_attempts,
                
                # Performance
                'successful_downloads': self._successful_downloads,
                'cache_hits': self._cache_hits,
                'cache_misses': self._cache_misses,
                'performance_metrics': len(self._performance_metrics),
                
                # SIC v3.1 Integration
                'sic_integration': {
                    'version': 'v3.1',
                    'available': SIC_V3_1_AVAILABLE,
                    'lazy_modules': len(self._lazy_modules),
                    'cache_enabled': self._use_predictive_cache,
                    'debug_enabled': self._enable_debug
                },
                
                # Conexi√≥n info
                'connection_info': {
                    'terminal_path': self.connection_info.terminal_path,
                    'terminal_name': self.connection_info.terminal_name,
                    'company': self.connection_info.company,
                    'account_number': self.connection_info.account_number,
                    'server': self.connection_info.server,
                    'connection_time': self.connection_info.connection_time.isoformat() if self.connection_info.connection_time else None
                },
                
                # Funciones disponibles
                'available_functions': self.available_functions
            }
            
            # Agregar debug summary si est√° habilitado
            if self._enable_debug:
                status['debug_summary'] = debugger.get_debug_summary()
            
            return status

    def get_performance_report(self) -> Dict[str, Any]:
        """üìà Genera reporte de performance completo"""
        if not self._performance_metrics:
            return {
                'total_operations': 0,
                'total_duration': 0,
                'connection_attempts': self._connection_attempts,
                'successful_downloads': self._successful_downloads,
                'cache_performance': {
                    'hits': self._cache_hits,
                    'misses': self._cache_misses,
                    'hit_ratio': 0
                },
                'operation_stats': {},
                'sic_integration_active': SIC_V3_1_AVAILABLE,
                'mt5_available': MT5_AVAILABLE,
                'debug_events': debugger.get_debug_summary()['debug_stats']['total_events'] if self._enable_debug else 0
            }
        
        # Calcular m√©tricas agregadas
        operations_by_type = {}
        total_duration = 0
        
        for metric in self._performance_metrics:
            op_type = metric['operation']
            if op_type not in operations_by_type:
                operations_by_type[op_type] = []
            operations_by_type[op_type].append(metric)
            total_duration += metric.get('duration', 0)
        
        # Calcular estad√≠sticas por operaci√≥n
        operation_stats = {}
        for op_type, metrics in operations_by_type.items():
            durations = [m['duration'] for m in metrics if 'duration' in m]
            if durations:
                operation_stats[op_type] = {
                    'count': len(metrics),
                    'avg_duration': sum(durations) / len(durations),
                    'min_duration': min(durations),
                    'max_duration': max(durations),
                    'total_duration': sum(durations)
                }
        
        return {
            'total_operations': len(self._performance_metrics),
            'total_duration': total_duration,
            'connection_attempts': self._connection_attempts,
            'successful_downloads': self._successful_downloads,
            'cache_performance': {
                'hits': self._cache_hits,
                'misses': self._cache_misses,
                'hit_ratio': self._cache_hits / (self._cache_hits + self._cache_misses) if (self._cache_hits + self._cache_misses) > 0 else 0
            },
            'operation_stats': operation_stats,
            'sic_integration_active': SIC_V3_1_AVAILABLE,
            'mt5_available': MT5_AVAILABLE,
            'debug_events': debugger.get_debug_summary()['debug_stats']['total_events'] if self._enable_debug else 0
        }

# ===============================
# FUNCIONES DE UTILIDAD Y LOGGING
# ===============================

def _log_info(message: str):
    """üìù Log de informaci√≥n optimizado"""
    try:
        if hasattr(sic, 'log_info'):
            sic.log_info(message, 'mt5_data_manager', 'info')
        else:
            print(f"‚ÑπÔ∏è  [MT5DataManager v6.0] {message}")
    except:
        print(f"‚ÑπÔ∏è  [MT5DataManager v6.0] {message}")

def _log_warning(message: str):
    """‚ö†Ô∏è  Log de advertencia optimizado"""
    try:
        if hasattr(sic, 'log_warning'):
            sic.log_warning(message, 'mt5_data_manager', 'warning')
        else:
            print(f"‚ö†Ô∏è  [MT5DataManager v6.0] {message}")
    except:
        print(f"‚ö†Ô∏è  [MT5DataManager v6.0] {message}")

def _log_error(message: str):
    """‚ùå Log de error optimizado"""
    try:
        if hasattr(sic, 'log_error'):
            sic.log_error(message, 'mt5_data_manager', 'error')
        else:
            print(f"‚ùå [MT5DataManager v6.0] {message}")
    except:
        print(f"‚ùå [MT5DataManager v6.0] {message}")

# ===============================
# FACTORY FUNCTIONS
# ===============================

def get_mt5_manager(config: Optional[Dict[str, Any]] = None) -> MT5DataManager:
    """
    üè≠ Factory function para crear MT5DataManager v6.0 Enterprise
    
    Args:
        config: Configuraci√≥n opcional del manager
        
    Returns:
        Instancia configurada de MT5DataManager
    """
    default_config = {
        'enable_debug': True,
        'use_predictive_cache': True,
        'enable_lazy_loading': True,
        'security_level': 'MAXIMUM'
    }
    
    if config:
        default_config.update(config)
    
    return MT5DataManager(config=default_config)

def create_connection_info() -> MT5ConnectionInfo:
    """üìä Factory function para crear MT5ConnectionInfo"""
    return MT5ConnectionInfo()

# ===============================
# COMPATIBILIDAD Y LEGACY
# ===============================

def descargar_y_guardar_m1(symbol: str = "EURUSD", lookback: int = 200000) -> bool:
    """
    üöÄ FUNCI√ìN DE COMPATIBILIDAD SIC v3.1/v6.0
    Descarga y guarda las velas de M1 manteniendo compatibilidad
    ‚úÖ ACTUALIZADA: Para ICT Engine v6.1.0 Enterprise
    """
    try:
        manager = get_mt5_manager()
        if not manager.connect():
            _log_error(f"No se pudo conectar a MT5 para descargar {symbol}")
            return False
        
        _log_info(f"üöÄ SIC v6.0 - Descargando velas M1 para {symbol}...")
        
        historical_data = manager.get_historical_data(symbol, "M1", lookback, force_download=True)
        if historical_data and historical_data.data is not None and not historical_data.data.empty:
            _log_info(f"‚úÖ Velas M1 descargadas: {historical_data.bars_count} velas para {symbol}")
            return True
        else:
            _log_error(f"‚ùå ERROR: No se pudieron descargar velas M1 para {symbol}")
            return False
            
    except Exception as e:
        _log_error(f"‚ùå Error en descarga M1: {e}")
        return False

# ===============================
# TEST Y VALIDACI√ìN
# ===============================

if __name__ == "__main__":
    print("üß™ Testing MT5DataManager v6.0 Enterprise...")
    print("üèÜ COMPONENTE FUNDAMENTAL #1 - CRITICAL PRIORITY")
    
    try:
        # Crear manager con configuraci√≥n de test
        test_config = {
            'enable_debug': True,
            'use_predictive_cache': True,
            'enable_lazy_loading': True,
            'security_level': 'MAXIMUM'
        }
        
        manager = get_mt5_manager(test_config)
        print("‚úÖ MT5DataManager creado exitosamente")
        
        # Test de estado inicial
        status = manager.get_status()
        print(f"‚úÖ Estado inicial: SIC v{status['sic_integration']['version']}")
        print(f"   - MT5 Available: {status['mt5_available']}")
        print(f"   - SIC Integration: {status['sic_integration']['available']}")
        
        # Test de configuraci√≥n
        connection_info = create_connection_info()
        print(f"‚úÖ ConnectionInfo creado: {connection_info.account_type.value}")
        
        # Test de performance report
        report = manager.get_performance_report()
        print(f"‚úÖ Reporte de performance generado")
        
        # Test de funciones b√°sicas
        tf_constant = manager.get_timeframe_constant('M1')
        print(f"‚úÖ Timeframe M1 constant: {tf_constant}")
        
        # Test de compatibilidad
        print("‚úÖ Funciones de compatibilidad disponibles")
        
        print("\nüéØ MT5DataManager v6.0 Enterprise - TEST COMPLETADO")
        print("üèÜ COMPONENTE FUNDAMENTAL #1 - LISTO PARA PRODUCCI√ìN")
        
    except Exception as e:
        print(f"‚ùå Error en test: {e}")
        import traceback
        traceback.print_exc()
    
    print("\nüìã RESUMEN:")
    print("   ‚Ä¢ MT5DataManager v6.0 Enterprise: COMPONENTE FUNDAMENTAL")
    print("   ‚Ä¢ Integraci√≥n SIC v3.1: COMPLETA")
    print("   ‚Ä¢ Seguridad FTMO Global Markets: M√ÅXIMA")
    print("   ‚Ä¢ Lazy Loading: HABILITADO") 
    print("   ‚Ä¢ Cache Predictivo: HABILITADO")
    print("   ‚Ä¢ Debug Avanzado: HABILITADO")
    print("   ‚Ä¢ Estado: LISTO PARA PRODUCCI√ìN ‚úÖ")
