#!/usr/bin/env python3
"""
üîç AUDITOR√çA COMPLETA DEL SISTEMA ICT ENGINE v6.0 ENTERPRISE
===========================================================

Auditor√≠a exhaustiva para evaluar el estado de producci√≥n del sistema.
Genera reporte detallado de todos los componentes cr√≠ticos.

OBJETIVO: Determinar la preparaci√≥n del sistema para trading real con dinero.
"""

import os
import sys
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any
import json

class ICTEngineAuditor:
    """Auditor completo del sistema ICT Engine v6.0 Enterprise"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.audit_results = {
            'audit_timestamp': datetime.now().isoformat(),
            'system_version': 'ICT Engine v6.0 Enterprise',
            'audit_status': 'UNKNOWN',
            'critical_issues': [],
            'warnings': [],
            'passed_checks': [],
            'components': {},
            'overall_score': 0,
            'production_ready': False
        }
        
    def run_complete_audit(self):
        """Ejecutar auditor√≠a completa del sistema"""
        print("üîç INICIANDO AUDITOR√çA COMPLETA ICT ENGINE v6.0 ENTERPRISE")
        print("=" * 60)
        
        # 1. Auditar validador de datos cr√≠tico
        self.audit_data_validator()
        
        # 2. Auditar m√≥dulos base
        self.audit_base_modules()
        
        # 3. Auditar patrones individuales
        self.audit_pattern_dashboards()
        
        # 4. Auditar sistema de datos de mercado
        self.audit_market_data_system()
        
        # 5. Auditar configuraciones
        self.audit_configurations()
        
        # 6. Auditar dashboard principal
        self.audit_main_dashboard()
        
        # 7. Auditar sistema de ejecuci√≥n
        self.audit_execution_system()
        
        # 8. Calcular puntuaci√≥n final
        self.calculate_final_score()
        
        # 9. Generar reporte
        self.generate_audit_report()
        
    def audit_data_validator(self):
        """Auditar el validador de datos cr√≠tico"""
        print("üîí Auditando validador de datos cr√≠tico...")
        
        validator_path = self.project_root / "01-CORE" / "data_management" / "data_validator_real_trading.py"
        
        component = {
            'name': 'data_validator_real_trading',
            'status': 'UNKNOWN',
            'issues': [],
            'checks_passed': [],
            'score': 0
        }
        
        # Verificar existencia
        if validator_path.exists():
            component['checks_passed'].append("‚úÖ Archivo del validador existe")
            
            # Verificar contenido
            try:
                with open(validator_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Verificar m√©todos cr√≠ticos
                required_methods = [
                    'validate_price_data',
                    'validate_pattern_analysis',
                    'validate_market_data',
                    '_validate_price_columns',
                    '_validate_price_ranges',
                    '_validate_timestamps'
                ]
                
                for method in required_methods:
                    if f"def {method}" in content:
                        component['checks_passed'].append(f"‚úÖ M√©todo {method} implementado")
                    else:
                        component['issues'].append(f"‚ùå M√©todo {method} faltante")
                
                # Verificar que tenga manejo de errores
                if "try:" in content and "except" in content:
                    component['checks_passed'].append("‚úÖ Manejo de errores implementado")
                else:
                    component['issues'].append("‚ùå Falta manejo robusto de errores")
                
                # Verificar logging
                if "logging" in content or "print" in content:
                    component['checks_passed'].append("‚úÖ Sistema de logging presente")
                else:
                    component['issues'].append("‚ùå Falta sistema de logging")
                    
                component['score'] = min(100, len(component['checks_passed']) * 15)
                component['status'] = 'CRITICAL' if component['score'] < 70 else 'PASSED'
                
            except Exception as e:
                component['issues'].append(f"‚ùå Error leyendo archivo: {e}")
                component['status'] = 'FAILED'
        else:
            component['issues'].append("‚ùå Archivo del validador no existe")
            component['status'] = 'CRITICAL'
        
        self.audit_results['components']['data_validator'] = component
        
    def audit_base_modules(self):
        """Auditar m√≥dulos base del sistema"""
        print("üèóÔ∏è Auditando m√≥dulos base...")
        
        base_module_path = self.project_root / "09-DASHBOARD" / "patterns_analysis" / "base_pattern_module.py"
        
        component = {
            'name': 'base_pattern_module',
            'status': 'UNKNOWN',
            'issues': [],
            'checks_passed': [],
            'score': 0
        }
        
        if base_module_path.exists():
            try:
                with open(base_module_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Verificar integraci√≥n con validador
                if "data_validator" in content:
                    component['checks_passed'].append("‚úÖ Integraci√≥n con validador presente")
                else:
                    component['issues'].append("‚ùå Falta integraci√≥n con validador")
                
                # Verificar m√©todos de validaci√≥n
                if "validate_market_data" in content:
                    component['checks_passed'].append("‚úÖ M√©todo validate_market_data implementado")
                else:
                    component['issues'].append("‚ùå Falta m√©todo validate_market_data")
                
                if "validate_pattern_result" in content:
                    component['checks_passed'].append("‚úÖ M√©todo validate_pattern_result implementado")
                else:
                    component['issues'].append("‚ùå Falta m√©todo validate_pattern_result")
                
                # Verificar clase base abstracta
                if "ABC" in content and "@abstractmethod" in content:
                    component['checks_passed'].append("‚úÖ Estructura abstracta correcta")
                else:
                    component['issues'].append("‚ùå Falta estructura abstracta")
                
                component['score'] = min(100, len(component['checks_passed']) * 25)
                component['status'] = 'CRITICAL' if component['score'] < 75 else 'PASSED'
                
            except Exception as e:
                component['issues'].append(f"‚ùå Error leyendo archivo: {e}")
                component['status'] = 'FAILED'
        else:
            component['issues'].append("‚ùå Archivo base_pattern_module no existe")
            component['status'] = 'CRITICAL'
        
        self.audit_results['components']['base_module'] = component
        
    def audit_pattern_dashboards(self):
        """Auditar m√≥dulos de patrones individuales"""
        print("üéØ Auditando dashboards de patrones...")
        
        patterns_dir = self.project_root / "09-DASHBOARD" / "patterns_analysis" / "individual_patterns"
        
        component = {
            'name': 'pattern_dashboards',
            'status': 'UNKNOWN',
            'issues': [],
            'checks_passed': [],
            'score': 0,
            'patterns_audited': {}
        }
        
        if patterns_dir.exists():
            pattern_files = [f for f in patterns_dir.glob("*.py") if f.name != "__init__.py"]
            
            for pattern_file in pattern_files:
                pattern_name = pattern_file.stem
                pattern_audit = {'score': 0, 'checks': [], 'issues': []}
                
                try:
                    with open(pattern_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # Verificar uso de validaci√≥n
                    if "validate_market_data" in content:
                        pattern_audit['checks'].append("‚úÖ Usa validate_market_data")
                    else:
                        pattern_audit['issues'].append("‚ùå No usa validate_market_data")
                    
                    if "validate_pattern_result" in content:
                        pattern_audit['checks'].append("‚úÖ Usa validate_pattern_result")
                    else:
                        pattern_audit['issues'].append("‚ùå No usa validate_pattern_result")
                    
                    # Verificar herencia correcta
                    if "BasePatternDashboard" in content:
                        pattern_audit['checks'].append("‚úÖ Hereda de BasePatternDashboard")
                    else:
                        pattern_audit['issues'].append("‚ùå No hereda de BasePatternDashboard")
                    
                    # Verificar m√©todo principal
                    if "_perform_pattern_analysis" in content:
                        pattern_audit['checks'].append("‚úÖ Implementa _perform_pattern_analysis")
                    else:
                        pattern_audit['issues'].append("‚ùå Falta _perform_pattern_analysis")
                    
                    pattern_audit['score'] = min(100, len(pattern_audit['checks']) * 25)
                    
                except Exception as e:
                    pattern_audit['issues'].append(f"‚ùå Error: {e}")
                
                component['patterns_audited'][pattern_name] = pattern_audit
            
            # Calcular score general
            if component['patterns_audited']:
                total_score = sum(p['score'] for p in component['patterns_audited'].values())
                component['score'] = total_score // len(component['patterns_audited'])
                
                passed_patterns = sum(1 for p in component['patterns_audited'].values() if p['score'] >= 75)
                component['checks_passed'].append(f"‚úÖ {passed_patterns}/{len(component['patterns_audited'])} patrones pasaron auditor√≠a")
                
                if component['score'] >= 75:
                    component['status'] = 'PASSED'
                elif component['score'] >= 50:
                    component['status'] = 'WARNING'
                else:
                    component['status'] = 'CRITICAL'
            else:
                component['status'] = 'CRITICAL'
                component['issues'].append("‚ùå No se encontraron archivos de patrones")
        else:
            component['issues'].append("‚ùå Directorio de patrones no existe")
            component['status'] = 'CRITICAL'
        
        self.audit_results['components']['pattern_dashboards'] = component
        
    def audit_market_data_system(self):
        """Auditar sistema de datos de mercado"""
        print("üìä Auditando sistema de datos de mercado...")
        
        market_system_path = self.project_root / "run_real_market_system.py"
        
        component = {
            'name': 'market_data_system',
            'status': 'UNKNOWN',
            'issues': [],
            'checks_passed': [],
            'score': 0
        }
        
        if market_system_path.exists():
            try:
                with open(market_system_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Verificar integraci√≥n con validador
                if "data_validator" in content:
                    component['checks_passed'].append("‚úÖ Integraci√≥n con validador presente")
                else:
                    component['issues'].append("‚ùå Falta integraci√≥n con validador")
                
                # Verificar conexi√≥n MT5
                if "MetaTrader5" in content and "mt5" in content:
                    component['checks_passed'].append("‚úÖ Conexi√≥n MT5 implementada")
                else:
                    component['issues'].append("‚ùå Falta conexi√≥n MT5")
                
                # Verificar manejo de errores
                if "try:" in content and "except" in content:
                    component['checks_passed'].append("‚úÖ Manejo de errores presente")
                else:
                    component['issues'].append("‚ùå Falta manejo de errores")
                
                # Verificar cache de datos
                if "cache" in content.lower():
                    component['checks_passed'].append("‚úÖ Sistema de cache implementado")
                else:
                    component['issues'].append("‚ùå Falta sistema de cache")
                
                component['score'] = min(100, len(component['checks_passed']) * 25)
                component['status'] = 'CRITICAL' if component['score'] < 75 else 'PASSED'
                
            except Exception as e:
                component['issues'].append(f"‚ùå Error leyendo archivo: {e}")
                component['status'] = 'FAILED'
        else:
            component['issues'].append("‚ùå Sistema de datos de mercado no existe")
            component['status'] = 'CRITICAL'
        
        self.audit_results['components']['market_data_system'] = component
        
    def audit_configurations(self):
        """Auditar archivos de configuraci√≥n"""
        print("‚öôÔ∏è Auditando configuraciones...")
        
        config_dir = self.project_root / "01-CORE" / "config"
        
        component = {
            'name': 'configurations',
            'status': 'UNKNOWN',
            'issues': [],
            'checks_passed': [],
            'score': 0
        }
        
        if config_dir.exists():
            config_files = list(config_dir.glob("*.json"))
            
            if config_files:
                component['checks_passed'].append(f"‚úÖ {len(config_files)} archivos de configuraci√≥n encontrados")
                
                for config_file in config_files:
                    try:
                        with open(config_file, 'r', encoding='utf-8') as f:
                            json.load(f)  # Verificar JSON v√°lido
                        component['checks_passed'].append(f"‚úÖ {config_file.name} - JSON v√°lido")
                    except Exception as e:
                        component['issues'].append(f"‚ùå {config_file.name} - JSON inv√°lido: {e}")
                
                component['score'] = min(100, (len(component['checks_passed']) * 100) // (len(config_files) + 1))
                component['status'] = 'PASSED' if component['score'] >= 80 else 'WARNING'
            else:
                component['issues'].append("‚ùå No se encontraron archivos de configuraci√≥n")
                component['status'] = 'WARNING'
        else:
            component['issues'].append("‚ùå Directorio de configuraci√≥n no existe")
            component['status'] = 'CRITICAL'
        
        self.audit_results['components']['configurations'] = component
        
    def audit_main_dashboard(self):
        """Auditar dashboard principal"""
        print("üñ•Ô∏è Auditando dashboard principal...")
        
        dashboard_dir = self.project_root / "09-DASHBOARD"
        
        component = {
            'name': 'main_dashboard',
            'status': 'UNKNOWN',
            'issues': [],
            'checks_passed': [],
            'score': 0
        }
        
        if dashboard_dir.exists():
            # Verificar archivos principales del dashboard
            main_files = ['dashboard.py', 'ict_dashboard.py', 'launch_dashboard.py']
            
            for file_name in main_files:
                file_path = dashboard_dir / file_name
                if file_path.exists():
                    component['checks_passed'].append(f"‚úÖ {file_name} existe")
                else:
                    component['issues'].append(f"‚ùå {file_name} faltante")
            
            # Verificar estructura de directorios
            required_dirs = ['components', 'core', 'utils', 'widgets']
            for dir_name in required_dirs:
                dir_path = dashboard_dir / dir_name
                if dir_path.exists() and dir_path.is_dir():
                    component['checks_passed'].append(f"‚úÖ Directorio {dir_name} existe")
                else:
                    component['issues'].append(f"‚ùå Directorio {dir_name} faltante")
            
            component['score'] = min(100, (len(component['checks_passed']) * 100) // (len(main_files) + len(required_dirs)))
            component['status'] = 'PASSED' if component['score'] >= 70 else 'WARNING'
        else:
            component['issues'].append("‚ùå Directorio del dashboard no existe")
            component['status'] = 'CRITICAL'
        
        self.audit_results['components']['main_dashboard'] = component
        
    def audit_execution_system(self):
        """Auditar sistema de ejecuci√≥n"""
        print("üöÄ Auditando sistema de ejecuci√≥n...")
        
        component = {
            'name': 'execution_system',
            'status': 'UNKNOWN',
            'issues': [],
            'checks_passed': [],
            'score': 0
        }
        
        # Verificar archivos de ejecuci√≥n principales
        execution_files = [
            'main.py',
            'run_complete_system.py',
            'run_real_market_system.py',
            'launch.bat',
            'start_system.bat'
        ]
        
        for file_name in execution_files:
            file_path = self.project_root / file_name
            if file_path.exists():
                component['checks_passed'].append(f"‚úÖ {file_name} existe")
            else:
                component['issues'].append(f"‚ùå {file_name} faltante")
        
        component['score'] = min(100, (len(component['checks_passed']) * 100) // len(execution_files))
        component['status'] = 'PASSED' if component['score'] >= 80 else 'WARNING'
        
        self.audit_results['components']['execution_system'] = component
        
    def calculate_final_score(self):
        """Calcular puntuaci√≥n final del sistema"""
        print("üìä Calculando puntuaci√≥n final...")
        
        # Pesos por componente (suma debe ser 100)
        weights = {
            'data_validator': 30,      # Cr√≠tico para seguridad
            'base_module': 20,         # Base de todos los patrones
            'pattern_dashboards': 25,  # Funcionalidad principal
            'market_data_system': 15,  # Datos en tiempo real
            'configurations': 5,       # Configuraciones
            'main_dashboard': 3,       # Interface
            'execution_system': 2      # Scripts de ejecuci√≥n
        }
        
        total_score = 0
        critical_components = ['data_validator', 'base_module', 'pattern_dashboards', 'market_data_system']
        
        for component_name, weight in weights.items():
            if component_name in self.audit_results['components']:
                component = self.audit_results['components'][component_name]
                component_score = component.get('score', 0)
                weighted_score = (component_score * weight) / 100
                total_score += weighted_score
                
                # Verificar estado cr√≠tico
                if component.get('status') == 'CRITICAL' and component_name in critical_components:
                    self.audit_results['critical_issues'].append(
                        f"üö® COMPONENTE CR√çTICO FALLIDO: {component_name} - Score: {component_score}"
                    )
                elif component.get('status') == 'WARNING':
                    self.audit_results['warnings'].append(
                        f"‚ö†Ô∏è Advertencia en {component_name} - Score: {component_score}"
                    )
                else:
                    self.audit_results['passed_checks'].append(
                        f"‚úÖ {component_name} - Score: {component_score}"
                    )
        
        self.audit_results['overall_score'] = round(total_score, 2)
        
        # Determinar estado general
        if total_score >= 85 and len(self.audit_results['critical_issues']) == 0:
            self.audit_results['audit_status'] = 'PRODUCTION_READY'
            self.audit_results['production_ready'] = True
        elif total_score >= 70 and len(self.audit_results['critical_issues']) <= 1:
            self.audit_results['audit_status'] = 'NEARLY_READY'
            self.audit_results['production_ready'] = False
        elif total_score >= 50:
            self.audit_results['audit_status'] = 'NEEDS_WORK'
            self.audit_results['production_ready'] = False
        else:
            self.audit_results['audit_status'] = 'NOT_READY'
            self.audit_results['production_ready'] = False
        
    def generate_audit_report(self):
        """Generar reporte final de auditor√≠a"""
        print("\n" + "=" * 60)
        print("üìã REPORTE FINAL DE AUDITOR√çA ICT ENGINE v6.0 ENTERPRISE")
        print("=" * 60)
        
        # Estado general
        status_emoji = {
            'PRODUCTION_READY': 'üü¢',
            'NEARLY_READY': 'üü°',
            'NEEDS_WORK': 'üü†',
            'NOT_READY': 'üî¥'
        }
        
        print(f"\n{status_emoji.get(self.audit_results['audit_status'], '‚ùì')} ESTADO GENERAL: {self.audit_results['audit_status']}")
        print(f"üìä PUNTUACI√ìN FINAL: {self.audit_results['overall_score']}/100")
        print(f"üí∞ LISTO PARA TRADING REAL: {'S√ç' if self.audit_results['production_ready'] else 'NO'}")
        
        # Problemas cr√≠ticos
        if self.audit_results['critical_issues']:
            print(f"\nüö® PROBLEMAS CR√çTICOS ({len(self.audit_results['critical_issues'])}):")
            for issue in self.audit_results['critical_issues']:
                print(f"   {issue}")
        
        # Advertencias
        if self.audit_results['warnings']:
            print(f"\n‚ö†Ô∏è ADVERTENCIAS ({len(self.audit_results['warnings'])}):")
            for warning in self.audit_results['warnings']:
                print(f"   {warning}")
        
        # Componentes que pasaron
        if self.audit_results['passed_checks']:
            print(f"\n‚úÖ COMPONENTES EXITOSOS ({len(self.audit_results['passed_checks'])}):")
            for check in self.audit_results['passed_checks']:
                print(f"   {check}")
        
        # Detalles por componente
        print(f"\nüìã DETALLE POR COMPONENTE:")
        for component_name, component in self.audit_results['components'].items():
            status = component.get('status', 'UNKNOWN')
            score = component.get('score', 0)
            print(f"\n   üîß {component_name.upper()} - {status} ({score}/100)")
            
            for check in component.get('checks_passed', []):
                print(f"      {check}")
            
            for issue in component.get('issues', []):
                print(f"      {issue}")
        
        # Recomendaciones finales
        print(f"\nüí° RECOMENDACIONES:")
        if self.audit_results['production_ready']:
            print("   ‚úÖ El sistema est√° listo para trading con dinero real")
            print("   ‚úÖ Todos los componentes cr√≠ticos han pasado la auditor√≠a")
            print("   ‚úÖ Validaci√≥n de datos implementada correctamente")
        else:
            print("   ‚ùå NO usar este sistema para trading real hasta resolver problemas cr√≠ticos")
            print("   üîß Corregir todos los componentes cr√≠ticos marcados como FALLIDOS")
            print("   ‚ö†Ô∏è Realizar pruebas exhaustivas en cuenta demo antes de producci√≥n")
        
        # Guardar reporte en archivo
        report_path = self.project_root / f"audit_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(self.audit_results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ Reporte completo guardado en: {report_path}")
        print("=" * 60)

def main():
    """Funci√≥n principal"""
    auditor = ICTEngineAuditor()
    auditor.run_complete_audit()

if __name__ == "__main__":
    main()
