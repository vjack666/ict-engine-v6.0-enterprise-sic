#!/usr/bin/env python3
"""
üéØ SILVER BULLET TAB - PESTA√ëA PRINCIPAL
=======================================

Pesta√±a principal del dashboard Silver Bullet Enterprise.
Incluye controles de trading, monitoreo en tiempo real, an√°lisis de se√±ales
y gesti√≥n de riesgo integrada.

Funciones:
- ‚úÖ Trading Controls (Start/Stop Live Trading)
- ‚úÖ Real-time Signal Monitor con Scroll
- ‚úÖ Performance Analytics Dashboard
- ‚úÖ Risk Management Integration
- ‚úÖ Live P&L Tracking
- ‚úÖ Emergency Stop Controls

Versi√≥n: v6.1.0-enterprise
"""

import sys
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional

# Configurar rutas
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root / "01-CORE"))
sys.path.insert(0, str(Path(__file__).parent))  # Agregar directorio silver_bullet

# Imports de Textual
try:
    from textual.app import ComposeResult
    from textual.containers import Container, Horizontal, Vertical, ScrollableContainer
    from textual.widgets import Static, Button, RichLog, Label
    from textual.reactive import reactive
    from textual.binding import Binding
    from rich.text import Text
    from rich.panel import Panel
    from rich.columns import Columns
    from rich.table import Table
except ImportError as e:
    print(f"‚ö†Ô∏è Textual no disponible: {e}")

# Imports de m√≥dulos Silver Bullet enhanced
try:
    from trading_controls import TradingControls, TradingState
    from signal_monitor import SignalMonitor
    from performance_analyzer import PerformanceAnalyzer
    from quality_scorer import QualityScorer
    SILVER_BULLET_MODULES_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è M√≥dulos Silver Bullet no disponibles: {e}")
    SILVER_BULLET_MODULES_AVAILABLE = False
    # Clases dummy para evitar errores
    class TradingControls: pass
    class TradingState: pass
    class SignalMonitor: pass
    class PerformanceAnalyzer: pass
    class QualityScorer: pass

# CHECKPOINT 4: RiskManager del sistema real
try:
    from risk_management import RiskManager
    from data_management.ict_data_manager import ICTDataManager
    REAL_SYSTEM_AVAILABLE = True
    print("‚úÖ [SilverBulletTab] Sistema real conectado")
except ImportError:
    RiskManager = None
    ICTDataManager = None
    REAL_SYSTEM_AVAILABLE = False
    print("‚ö†Ô∏è [SilverBulletTab] Sistema real no disponible")

class SilverBulletTab:
    """üéØ Pesta√±a principal Silver Bullet Enterprise"""
    
    def __init__(self, config: Dict[str, Any], data_collector=None):
        self.config = config
        self.data_collector = data_collector
        
        # CHECKPOINT 6: Componentes principales con Quality Scorer
        self.trading_controls = TradingControls(data_collector)
        self.signal_monitor = SignalMonitor(data_collector)
        self.performance_analyzer = PerformanceAnalyzer(data_collector)
        self.quality_scorer = QualityScorer()
        
        # Sistema real integrado
        self.risk_manager = None
        self.data_manager = None
        
        if REAL_SYSTEM_AVAILABLE and RiskManager and ICTDataManager:
            try:
                self.risk_manager = RiskManager(mode='live')
                self.data_manager = ICTDataManager()
                print("‚úÖ Sistema real integrado al Silver Bullet Dashboard")
            except Exception as e:
                print(f"‚ö†Ô∏è Error inicializando sistema real: {e}")
        
        # Estado interno
        self.last_update = datetime.now()
        self.auto_refresh = True
        self.refresh_interval = 2.0  # segundos
        
        # Generar datos simulados para demo
        self.performance_analyzer.simulate_trade_data()
    
    def get_enhanced_signals(self, symbol: str = "EURUSD", timeframe: str = "M15") -> Dict[str, Any]:
        """üìà Obtener se√±ales con quality scoring integrado"""
        try:
            # Obtener se√±ales b√°sicas
            signals = self.signal_monitor.get_signals(symbol, timeframe)
            
            # CHECKPOINT 7: Aplicar quality scoring
            if signals.get('setup_data'):
                quality_metrics = self.quality_scorer.score_signal_quality(
                    signals['setup_data'], 
                    symbol, 
                    timeframe
                )
                signals.update(quality_metrics)
            
            return signals
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error obteniendo se√±ales enhanced: {e}")
            return {'error': str(e), 'timestamp': datetime.now()}
    
    def get_comprehensive_performance(self) -> Dict[str, Any]:
        """üìä An√°lisis de rendimiento con quality scoring"""
        try:
            # M√©tricas b√°sicas de rendimiento
            performance = self.performance_analyzer.get_performance_summary()
            
            # CHECKPOINT 8: Agregar quality insights
            quality_insights = self.quality_scorer.get_quality_insights()
            performance['quality_insights'] = quality_insights
            
            return performance
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error en an√°lisis comprehensive: {e}")
            return {'error': str(e), 'timestamp': datetime.now()}
    
    def render_silver_bullet_dashboard(self) -> str:
        """üéØ Renderizar dashboard principal Silver Bullet"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # Obtener estados de los componentes
            trading_summary = self.trading_controls.get_status_summary()
            signal_summary = self.signal_monitor.get_signal_summary()
            performance_summary = self.performance_analyzer.get_performance_summary()
            risk_metrics = self.performance_analyzer.get_risk_metrics()
            
            # Construir header
            header = f"""[bold white on blue] üéØ SILVER BULLET ENTERPRISE v6.1 - LIVE TRADING DASHBOARD [/bold white on blue]
[bold cyan]{'='*80}[/bold cyan]"""
            
            # Estado del sistema
            system_status = f"""
[bold green]üöÄ ESTADO DEL SISTEMA[/bold green]
[cyan]{'‚îÄ'*40}[/cyan]
‚Ä¢ [bold]Timestamp:[/bold] {timestamp}
‚Ä¢ [bold]Trading Status:[/bold] [bold {'green' if trading_summary['is_active'] else 'red'}]{trading_summary['status']}[/bold {'green' if trading_summary['is_active'] else 'red'}]
‚Ä¢ [bold]Duraci√≥n:[/bold] {trading_summary['duration']}
‚Ä¢ [bold]Posiciones Activas:[/bold] [bold yellow]{trading_summary['positions']}[/bold yellow]
‚Ä¢ [bold]P&L Sesi√≥n:[/bold] [bold {'green' if '+' in trading_summary['pnl'] else 'red'}]{trading_summary['pnl']}[/bold {'green' if '+' in trading_summary['pnl'] else 'red'}]"""
            
            # Controles de trading
            trading_controls = f"""
[bold blue]üéÆ CONTROLES DE TRADING[/bold blue]
[cyan]{'‚îÄ'*40}[/cyan]
‚Ä¢ [bold]Estado Actual:[/bold] {'üü¢ ACTIVO' if trading_summary['is_active'] else 'üî¥ DETENIDO'}
‚Ä¢ [bold]√öltima Se√±al:[/bold] {trading_summary['last_signal']}
‚Ä¢ [bold]Errores:[/bold] [bold {'red' if int(trading_summary['errors']) > 0 else 'green'}]{trading_summary['errors']}[/bold {'red' if int(trading_summary['errors']) > 0 else 'green'}]
‚Ä¢ [bold]Risk Manager:[/bold] [bold green]{'‚úÖ Activo' if self.risk_manager else '‚ùå No disponible'}[/bold green]"""
            
            # Monitor de se√±ales
            signals_section = f"""
[bold yellow]üìä MONITOR DE SE√ëALES[/bold yellow]
[cyan]{'‚îÄ'*40}[/cyan]
‚Ä¢ [bold]Se√±ales Activas:[/bold] [bold cyan]{signal_summary['active_signals']}[/bold cyan]
‚Ä¢ [bold]Se√±ales Fuertes:[/bold] [bold green]{signal_summary['strong_signals']}[/bold green]
‚Ä¢ [bold]BUY Signals:[/bold] [bold green]{signal_summary['buy_signals']}[/bold green] | [bold]SELL Signals:[/bold] [bold red]{signal_summary['sell_signals']}[/bold red]
‚Ä¢ [bold]Confluencias:[/bold] [bold magenta]{signal_summary['confluences']}[/bold magenta]
‚Ä¢ [bold]Fortaleza Promedio:[/bold] [bold cyan]{signal_summary['avg_strength']:.2f}[/bold cyan]
‚Ä¢ [bold]√öltima Actualizaci√≥n:[/bold] {signal_summary['last_update']}"""
            
            # An√°lisis de rendimiento
            performance_section = f"""
[bold magenta]üìà AN√ÅLISIS DE RENDIMIENTO[/bold magenta]
[cyan]{'‚îÄ'*40}[/cyan]
‚Ä¢ [bold]Estado General:[/bold] [bold {performance_summary['status_color']}]{performance_summary['status']}[/bold {performance_summary['status_color']}]
‚Ä¢ [bold]Total Trades:[/bold] {performance_summary['total_trades']}
‚Ä¢ [bold]Win Rate:[/bold] [bold green]{performance_summary['win_rate']}[/bold green]
‚Ä¢ [bold]P&L Total:[/bold] [bold {'green' if '+' in performance_summary['total_pnl'] else 'red'}]{performance_summary['total_pnl']}[/bold {'green' if '+' in performance_summary['total_pnl'] else 'red'}]
‚Ä¢ [bold]Profit Factor:[/bold] [bold blue]{performance_summary['profit_factor']}[/bold blue]
‚Ä¢ [bold]Sharpe Ratio:[/bold] [bold cyan]{performance_summary['sharpe_ratio']}[/bold cyan]"""
            
            # Gesti√≥n de riesgo
            risk_section = f"""
[bold red]‚ö†Ô∏è GESTI√ìN DE RIESGO[/bold red]
[cyan]{'‚îÄ'*40}[/cyan]
‚Ä¢ [bold]Nivel de Riesgo:[/bold] [bold {'green' if risk_metrics['risk_level'] == 'LOW' else 'yellow' if risk_metrics['risk_level'] == 'MEDIUM' else 'red'}]{risk_metrics['risk_level']}[/bold {'green' if risk_metrics['risk_level'] == 'LOW' else 'yellow' if risk_metrics['risk_level'] == 'MEDIUM' else 'red'}] {risk_metrics['risk_status']}
‚Ä¢ [bold]Max Drawdown:[/bold] [bold red]{risk_metrics['max_drawdown']}[/bold red]
‚Ä¢ [bold]Sharpe Quality:[/bold] [bold blue]{risk_metrics['sharpe_quality']}[/bold blue]
‚Ä¢ [bold]P√©rdida Promedio:[/bold] [bold red]{risk_metrics['avg_loss']}[/bold red]"""
            
            # Top se√±ales
            top_signals = self.signal_monitor.get_top_signals(3)
            signals_list = ""
            if top_signals:
                signals_list = "\n[bold cyan]üéØ TOP SE√ëALES ACTIVAS[/bold cyan]\n[cyan]{'‚îÄ'*40}[/cyan]\n"
                for i, signal in enumerate(top_signals, 1):
                    formatted_signal = self.signal_monitor.format_signal_for_display(signal)
                    signals_list += f"{i}. {formatted_signal}\n"
            else:
                signals_list = "\n[bold cyan]üéØ TOP SE√ëALES ACTIVAS[/bold cyan]\n[cyan]{'‚îÄ'*40}[/cyan]\n[yellow]No hay se√±ales activas[/yellow]\n"
            
            # Rendimiento diario
            daily_performance = self.performance_analyzer.get_daily_performance(5)
            daily_section = "\n[bold blue]üìÖ RENDIMIENTO √öLTIMOS 5 D√çAS[/bold blue]\n[cyan]{'‚îÄ'*40}[/cyan]\n"
            for day in daily_performance:
                daily_section += f"‚Ä¢ {day['date']}: {day['status']} {day['pnl_formatted']} ({day['trades']} trades)\n"
            
            # Instrucciones de control
            controls_help = f"""
[bold white]‚å®Ô∏è CONTROLES DISPONIBLES[/bold white]
[cyan]{'‚îÄ'*40}[/cyan]
‚Ä¢ [bold]F1:[/bold] Iniciar Trading en Vivo
‚Ä¢ [bold]F2:[/bold] Detener Trading
‚Ä¢ [bold]F3:[/bold] Parada de Emergencia
‚Ä¢ [bold]F5:[/bold] Actualizar Dashboard
‚Ä¢ [bold]ESC:[/bold] Volver al men√∫ principal"""
            
            # Combinar todas las secciones
            full_dashboard = f"""{header}
{system_status}
{trading_controls}
{signals_section}
{performance_section}
{risk_section}
{signals_list}
{daily_section}
{controls_help}

[bold cyan]{'='*80}[/bold cyan]
[bold white]üéØ Silver Bullet Enterprise - Sistema de Trading Profesional[/bold white]"""
            
            return full_dashboard
            
        except Exception as e:
            return f"[red]‚ùå Error renderizando Silver Bullet Dashboard: {e}[/red]"
    
    def start_live_trading(self) -> bool:
        """üöÄ Iniciar trading en vivo"""
        try:
            success = self.trading_controls.start_live_trading()
            if success:
                print("üöÄ Silver Bullet Live Trading INICIADO desde Dashboard")
            return success
        except Exception as e:
            print(f"‚ùå Error iniciando trading desde dashboard: {e}")
            return False
    
    def stop_live_trading(self) -> bool:
        """üõë Detener trading en vivo"""
        try:
            success = self.trading_controls.stop_live_trading()
            if success:
                print("üõë Silver Bullet Live Trading DETENIDO desde Dashboard")
            return success
        except Exception as e:
            print(f"‚ùå Error deteniendo trading desde dashboard: {e}")
            return False
    
    def emergency_stop(self) -> bool:
        """üö® Parada de emergencia"""
        try:
            success = self.trading_controls.emergency_stop()
            if success:
                print("üö® EMERGENCY STOP ejecutado desde Dashboard")
            return success
        except Exception as e:
            print(f"‚ùå Error en emergency stop desde dashboard: {e}")
            return False
    
    def update_data(self):
        """Actualizar datos de todos los componentes"""
        try:
            # Actualizar se√±ales
            self.signal_monitor.update_signals()
            
            # Limpiar se√±ales antiguas
            self.signal_monitor.cleanup_old_signals()
            
            # Actualizar timestamp
            self.last_update = datetime.now()
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error actualizando datos Silver Bullet: {e}")
    
    def get_trading_status(self) -> Dict[str, Any]:
        """Obtener estado del trading"""
        return self.trading_controls.get_status_summary()
    
    def get_performance_data(self) -> Dict[str, Any]:
        """Obtener datos de rendimiento"""
        return {
            'summary': self.performance_analyzer.get_performance_summary(),
            'daily': self.performance_analyzer.get_daily_performance(),
            'risk': self.performance_analyzer.get_risk_metrics(),
            'by_symbol': self.performance_analyzer.get_symbol_performance()
        }
    
    def export_silver_bullet_report(self) -> str:
        """Exportar reporte completo de Silver Bullet"""
        try:
            report_data = {
                'timestamp': datetime.now().isoformat(),
                'silver_bullet_dashboard': 'v6.1.0-enterprise',
                'trading_status': self.get_trading_status(),
                'signals': {
                    'summary': self.signal_monitor.get_signal_summary(),
                    'active_signals': len(self.signal_monitor.active_signals),
                    'top_signals': [
                        {
                            'symbol': s.symbol,
                            'timeframe': s.timeframe,
                            'direction': s.direction,
                            'strength': s.strength,
                            'confidence': s.confidence
                        }
                        for s in self.signal_monitor.get_top_signals(5)
                    ]
                },
                'performance': self.get_performance_data(),
                'risk_manager_active': self.risk_manager is not None
            }
            
            import json
            return json.dumps(report_data, indent=2)
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error exportando reporte: {e}")
            return "{}"
    
    def simulate_live_activity(self):
        """Simular actividad para demostraci√≥n"""
        try:
            # Actualizar se√±ales
            self.signal_monitor.update_signals()
            
            # Simular algunos resultados de trading aleatorios
            import random
            if random.random() < 0.1:  # 10% chance cada actualizaci√≥n
                try:
                    from performance_analyzer import TradeResult
                except ImportError:
                    # Crear TradeResult dummy si no est√° disponible
                    class TradeResult:
                        def __init__(self, **kwargs):
                            for k, v in kwargs.items():
                                setattr(self, k, v)
                from datetime import datetime
                
                symbols = ['EURUSD', 'GBPUSD', 'USDJPY']
                symbol = random.choice(symbols)
                direction = random.choice(['BUY', 'SELL'])
                win = random.random() < 0.7  # 70% win rate
                
                trade = TradeResult(
                    symbol=symbol,
                    direction=direction,
                    entry_price=random.uniform(1.0, 2.0),
                    exit_price=random.uniform(1.0, 2.0),
                    profit_loss=random.uniform(5, 25) if win else -random.uniform(3, 15),
                    duration_minutes=random.randint(15, 120),
                    timestamp=datetime.now(),
                    signal_strength=random.uniform(0.6, 0.95),
                    win=win
                )
                
                self.performance_analyzer.add_trade_result(trade)
                print(f"üìä Nuevo trade simulado: {symbol} {direction} {'‚úÖ' if win else '‚ùå'}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error simulando actividad: {e}")
