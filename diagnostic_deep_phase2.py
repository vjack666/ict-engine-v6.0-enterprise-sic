#!/usr/bin/env python3
"""
üîç DIAGN√ìSTICO PROFUNDO DEL PIPELINE - PATTERN DETECTION
=======================================================

Test exhaustivo Fase 2: Verificar que los algoritmos ICT procesan los datos MT5 correctamente.
Con la columna 'time' ahora disponible, los algoritmos deber√≠an poder detectar patrones.
"""

import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime, timezone
sys.path.insert(0, os.path.abspath('.'))
sys.path.insert(0, os.path.join(os.path.abspath('.'), '01-CORE'))

def test_pattern_detection_pipeline():
    """Test exhaustivo del pipeline de detecci√≥n de patrones ICT"""
    print("\nüîç DIAGN√ìSTICO PROFUNDO - FASE 2: PATTERN DETECTION")
    print("=" * 60)
    
    # Primero obtener datos MT5 (ya sabemos que funciona)
    try:
        print("\n1. üìä OBTENIENDO DATOS MT5")
        from data_management.mt5_data_manager import MT5DataManager
        mt5_manager = MT5DataManager()
        
        if not mt5_manager.initialize():
            print("‚ùå FALLA: MT5 no se puede inicializar")
            return False
        
        live_data = mt5_manager.get_direct_market_data("EURUSD", "M15", 100)
        if live_data is None or len(live_data) == 0:
            print("‚ùå FALLA: No se obtuvieron datos MT5")
            return False
        
        print(f"‚úÖ Datos MT5 obtenidos: {len(live_data)} barras con columnas {list(live_data.columns)}")
        
    except Exception as e:
        print(f"‚ùå ERROR en obtenci√≥n de datos: {e}")
        return False
    
    # Test 2: Verificar componentes de an√°lisis ICT
    print("\n2. üéØ TEST COMPONENTES AN√ÅLISIS ICT")
    try:
        # Test Smart Money Analyzer
        from smart_money_concepts.smart_money_analyzer import SmartMoneyAnalyzer
        smart_analyzer = SmartMoneyAnalyzer()
        print("‚úÖ SmartMoneyAnalyzer: Inicializado")
        
        # Test an√°lisis con datos reales
        # El m√©todo correcto es analyze_smart_money_concepts
        timeframes_data = {'M15': live_data}
        smart_result = smart_analyzer.analyze_smart_money_concepts("EURUSD", timeframes_data)
        print(f"‚úÖ Smart Money Analysis: {type(smart_result)} generado")
        if isinstance(smart_result, dict):
            print(f"üìã Keys en resultado: {list(smart_result.keys())}")
        
    except Exception as e:
        print(f"‚ùå SmartMoneyAnalyzer Error: {e}")
        return False
    
    # Test 3: Verificar ICT Pattern Detector
    print("\n3. üîç TEST ICT PATTERN DETECTOR")
    try:
        from ict_engine.pattern_detector import ICTPatternDetector
        pattern_detector = ICTPatternDetector()
        print("‚úÖ ICTPatternDetector: Inicializado")
        
        # Test detecci√≥n de patrones espec√≠ficos
        patterns_found = {}
        
        # Usar m√©todos disponibles del ICTPatternDetector
        # Primero verificar qu√© m√©todos tiene
        available_methods = [method for method in dir(pattern_detector) if method.startswith('detect')]
        print(f"üìã M√©todos disponibles: {available_methods}")
        
        # Test gen√©rico de an√°lisis
        try:
            # Intentar an√°lisis general
            analysis_result = pattern_detector.analyze(live_data, {"symbol": "EURUSD"})
            print(f"‚úÖ Pattern Analysis: Resultado generado tipo {type(analysis_result)}")
            
            if isinstance(analysis_result, dict):
                patterns_found = {key: len(value) if isinstance(value, list) else 1 
                                for key, value in analysis_result.items() 
                                if key not in ['symbol', 'timestamp', 'timeframe']}
                print(f"üìä Patrones encontrados: {patterns_found}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Pattern Analysis Error: {e}")
            patterns_found = {}
        
        # Resumen de patrones detectados
        total_patterns = sum(patterns_found.values())
        print(f"\nüìä RESUMEN DETECCI√ìN DE PATRONES:")
        for pattern, count in patterns_found.items():
            print(f"   {pattern}: {count} patrones")
        print(f"üéØ TOTAL PATRONES DETECTADOS: {total_patterns}")
        
        if total_patterns > 0:
            print("‚úÖ FASE 2 EXITOSA: Pattern Detection est√° FUNCIONANDO")
            return True
        else:
            print("‚ö†Ô∏è PROBLEMA POTENCIAL: No se detectaron patrones")
            print("   - Podr√≠a ser condiciones de mercado")  
            print("   - Podr√≠a ser configuraci√≥n de algoritmos")
            
            # Intentar verificar si al menos los componentes est√°n funcionando
            if 'available_methods' in locals() and len(available_methods) > 0:
                print("‚úÖ Los detectores est√°n disponibles, problema podr√≠a ser de datos/par√°metros")
                return True  # Los componentes funcionan
            else:
                return False
        
    except Exception as e:
        print(f"‚ùå ICTPatternDetector Error: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        try:
            if 'mt5_manager' in locals():
                mt5_manager.close()
        except:
            pass

if __name__ == "__main__":
    success = test_pattern_detection_pipeline()
    if success:
        print("\n‚úÖ FASE 2 COMPLETADA: Pattern Detection FUNCIONAL")
        print("üéØ Procediendo a Fase 3: Validation Pipeline")
    else:
        print("\n‚ùå FASE 2 CON PROBLEMAS: Pattern Detection necesita investigaci√≥n")
        print("üîç Los algoritmos ICT pueden necesitar calibraci√≥n")
    
    sys.exit(0 if success else 1)