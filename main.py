#!/usr/bin/env python3
"""
üéØ ICT ENGINE v6.0 ENTERPRISE - MAIN UNIFIED SYSTEM (REAL DATA ONLY)
===================================================================

Sistema principal unificado SOLO con datos reales de mercado.
NO incluye datos sint√©ticos - Solo para entornos de producci√≥n.

Funcionalidades:
1. An√°lisis ICT completo con datos reales (MT5 + Yahoo Finance)
2. Dashboard interactivo con datos en vivo
3. Detecci√≥n de patrones en tiempo real
4. Sistema de memoria unificada
5. Cumplimiento total con estructura SIC/SLUC

NOTA: Sistema dise√±ado para PRODUCCI√ìN - Requiere fuentes de datos reales.

Autor: ICT Engine v6.0 Enterprise Team
Fecha: 4 Septiembre 2025
"""

import sys
import os
import time
import threading
import signal
import subprocess
import json
from pathlib import Path
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

# Configurar rutas del proyecto
project_root = Path(__file__).parent.absolute()
core_path = project_root / "01-CORE"
data_path = project_root / "04-DATA"
logs_path = project_root / "05-LOGS"
dashboard_path = project_root / "09-DASHBOARD"

# Agregar rutas al PYTHONPATH
sys.path.extend([
    str(project_root),
    str(core_path),
    str(core_path / "core"),
    str(dashboard_path),
    str(dashboard_path / "data"),
    str(dashboard_path / "widgets")
])

print(f"üîß Core path configurado: {core_path}")
print(f"üîß Data path configurado: {data_path}")
print(f"üîß Logs path configurado: {logs_path}")

class ICTEngineProductionSystem:
    """üè≠ Sistema ICT Engine para PRODUCCI√ìN - Solo datos reales"""
    
    def __init__(self):
        """Inicializar sistema de producci√≥n"""
        self.engine_process = None
        self.dashboard_process = None
        self.is_running = False
        self.shutdown_event = threading.Event()
        
        # Configurar handlers de se√±ales
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        # Verificar disponibilidad de fuentes de datos reales
        self.data_sources = self.check_real_data_sources()
        
        # Asegurar directorios necesarios
        self.ensure_required_folders()
    
    def _signal_handler(self, signum, frame):
        """Manejar se√±ales del sistema"""
        print(f"\nüì° Se√±al recibida: {signum}. Iniciando cierre...")
        self.shutdown()
    
    def check_real_data_sources(self):
        """üîç Verificar disponibilidad de fuentes de datos reales"""
        sources = {
            'mt5_available': False,
            'yfinance_available': False,
            'production_ready': False
        }
        
        print("\nüîç VERIFICANDO FUENTES DE DATOS REALES...")
        print("=" * 50)
        
        # Verificar MetaTrader 5
        try:
            import MetaTrader5 as mt5
            sources['mt5_available'] = True
            print("‚úÖ MetaTrader 5 disponible - Fuente PROFESIONAL")
        except ImportError:
            print("‚ö†Ô∏è MetaTrader 5 no instalado")
            print("üí° Para datos profesionales: pip install MetaTrader5")
        
        # Verificar yfinance
        try:
            import yfinance
            sources['yfinance_available'] = True
            print("‚úÖ yfinance disponible - Fuente FALLBACK")
        except ImportError:
            print("‚ùå yfinance no instalado")
            print("üí° Para datos de fallback: pip install yfinance")
        
        # Determinar si est√° listo para producci√≥n
        sources['production_ready'] = sources['mt5_available'] or sources['yfinance_available']
        
        if sources['production_ready']:
            print("üè≠ SISTEMA LISTO PARA PRODUCCI√ìN")
        else:
            print("‚ùå SISTEMA NO LISTO - Requiere configuraci√≥n de fuentes de datos")
            print("üìã NOTA DE PRODUCCI√ìN: Configure fuentes de datos reales para continuar")
        
        return sources
    
    def ensure_required_folders(self):
        """üìÅ Crear todas las carpetas necesarias si no existen"""
        required_folders = [
            data_path / "candles",
            data_path / "exports", 
            data_path / "reports",
            data_path / "reports" / "production",
            data_path / "status",
            data_path / "cache",
            data_path / "cache" / "memory",
            data_path / "memory_persistence",
            logs_path,
            logs_path / "application"
        ]
        
        for folder in required_folders:
            folder.mkdir(parents=True, exist_ok=True)
    
    def print_banner(self):
        """Mostrar banner del sistema"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        print("\n" + "="*80)
        print("üè≠ ICT ENGINE v6.0 ENTERPRISE - SISTEMA DE PRODUCCI√ìN (SOLO DATOS REALES)")
        print("="*80)
        print(f"üìÖ Timestamp: {timestamp}")
        print(f"üìÅ Project Root: {project_root}")
        print(f"üîß Core Path: {core_path}")
        print(f"üìä Data Path: {data_path}")
        print(f"üìã Logs Path: {logs_path}")
        print(f"üìà Dashboard Path: {dashboard_path}")
        
        # Mostrar estado de fuentes de datos
        if self.data_sources['production_ready']:
            print("üè≠ ESTADO: ‚úÖ LISTO PARA PRODUCCI√ìN")
            if self.data_sources['mt5_available']:
                print("üèÜ Fuente Principal: MetaTrader 5 Professional")
            if self.data_sources['yfinance_available']:
                print("üì° Fuente Fallback: Yahoo Finance")
        else:
            print("‚ö†Ô∏è ESTADO: ‚ùå REQUIERE CONFIGURACI√ìN DE PRODUCCI√ìN")
            print("üìã NOTA: Configure fuentes de datos reales antes de continuar")
        
        print("="*80)
        print()
    
    def print_menu(self):
        """Mostrar men√∫ de opciones"""
        print("üéÆ OPCIONES DE SISTEMA DE PRODUCCI√ìN:")
        print("="*50)
        
        if self.data_sources['production_ready']:
            print("1. üåê Ejecutar Sistema con Datos Reales")
            print("2. üìä Solo Dashboard con Datos Reales")
            print("3. üîÑ Sistema Completo + Dashboard")
            print("4. üéØ Silver Bullet Enterprise Dashboard")
            print("5. üîç Verificar Estructura y Compliance")
            print("6. üìã Generar Reporte de Estado")
            print("7. ‚öôÔ∏è Configurar Fuentes de Datos")
            print("8. ‚ùå Salir")
        else:
            print("‚ö†Ô∏è CONFIGURACI√ìN REQUERIDA PARA PRODUCCI√ìN:")
            print("1. üõ†Ô∏è Instalar MetaTrader 5")
            print("2. üõ†Ô∏è Instalar Yahoo Finance")
            print("3. üîç Verificar Estado del Sistema")
            print("4. üìã Ver Requisitos de Producci√≥n")
            print("5. ‚ùå Salir")
        
        print("="*50)
    
    def get_real_market_data(self, symbol, timeframe):
        """Obtener datos reales del mercado - Prioridad: MT5 > yfinance"""
        
        # OPCI√ìN 1: MetaTrader 5 (PROFESIONAL) usando MT5DataManager
        if self.data_sources['mt5_available']:
            try:
                print(f"   üèÜ Intentando conexi√≥n MT5 para {symbol} {timeframe}...")
                
                # Usar ImportManager para cargar MT5DataManager
                from import_manager import get_mt5_data_manager
                
                MT5DataManager = get_mt5_data_manager()
                if MT5DataManager is None:
                    print(f"   ‚ùå MT5DataManager no disponible")
                else:
                    # Crear instancia del manager
                    mt5_manager = MT5DataManager()
                    
                    # Intentar conexi√≥n
                    if mt5_manager.connect():
                        # Mapear timeframes ICT a formato del manager
                        timeframe_map = {
                            'M15': 'M15',
                            'H1': 'H1',
                            'H4': 'H4',
                            'D1': 'D1'
                        }
                        
                        mapped_tf = timeframe_map.get(timeframe, 'M15')
                        bars = 500
                        
                        # Obtener datos hist√≥ricos usando el manager
                        mt5_result = mt5_manager.get_historical_data(
                            symbol=symbol,
                            timeframe=mapped_tf,
                            count=bars
                        )
                        
                        if mt5_result is not None and len(mt5_result) > 20:
                            # Extraer DataFrame del objeto MT5HistoricalData
                            df = mt5_result.to_dataframe()
                            
                            if df is not None and len(df) > 20:
                                # Agregar informaci√≥n adicional
                                df['spread'] = 0.00015  # Spread estimado
                                df['data_source'] = 'MT5_PROFESSIONAL'
                                
                                print(f"   üèÜ DATOS MT5 OBTENIDOS: {len(df)} velas profesionales")
                                print(f"       üìä Cache: {'S√≠' if mt5_result.from_cache else 'No'}")
                                print(f"       ‚è±Ô∏è Tiempo: {mt5_result.processing_time:.3f}s")
                                
                                # Desconectar limpiamente
                                mt5_manager.disconnect()
                                return df
                            else:
                                print(f"   ‚ö†Ô∏è MT5: DataFrame inv√°lido para {symbol} {timeframe}")
                                mt5_manager.disconnect()
                        else:
                            print(f"   ‚ö†Ô∏è MT5: Datos insuficientes para {symbol} {timeframe}")
                            mt5_manager.disconnect()
                    else:
                        print(f"   ‚ùå MT5: No se pudo conectar al servidor")
                        
            except Exception as e:
                print(f"   ‚ùå MT5: Error - {e}")
        
        # OPCI√ìN 2: Yahoo Finance (FALLBACK)
        if self.data_sources['yfinance_available']:
            print(f"   üì° Fallback: Usando Yahoo Finance para {symbol} {timeframe}...")
            
            try:
                import yfinance as yf
                import pandas as pd
                
                # Mapear s√≠mbolos
                yahoo_symbols = {
                    "EURUSD": "EURUSD=X",
                    "GBPUSD": "GBPUSD=X", 
                    "USDJPY": "USDJPY=X",
                    "AUDUSD": "AUDUSD=X",
                    "USDCAD": "USDCAD=X",
                    "XAUUSD": "GC=F"  # Gold futures
                }
                
                yahoo_symbol = yahoo_symbols.get(symbol, f"{symbol}=X")
                
                # Mapear timeframes
                interval_map = {
                    "M15": "15m",
                    "H1": "1h", 
                    "H4": "4h",
                    "D1": "1d"
                }
                
                interval = interval_map.get(timeframe, "15m")
                period = "30d" if timeframe in ["M15", "H1"] else "90d"
                
                # Obtener datos
                ticker = yf.Ticker(yahoo_symbol)
                data = ticker.history(period=period, interval=interval)
                
                if not data.empty:
                    # Convertir a formato est√°ndar
                    df = pd.DataFrame({
                        'open': data['Open'].round(5),
                        'high': data['High'].round(5),
                        'low': data['Low'].round(5),
                        'close': data['Close'].round(5),
                        'volume': data['Volume'].fillna(0).astype(int),
                        'spread': 0.00015,
                        'data_source': 'YAHOO_FINANCE_REAL'
                    })
                    
                    df.index = data.index
                    print(f"   ‚úÖ Yahoo Finance: {len(df)} velas reales obtenidas")
                    return df
                else:
                    print(f"   ‚ùå Yahoo Finance: No se pudieron obtener datos para {symbol}")
                    
            except Exception as e:
                print(f"   ‚ùå Error obteniendo datos de Yahoo Finance: {e}")
        
        # No hay fuentes disponibles
        print(f"   üìã NOTA DE PRODUCCI√ìN: Configure fuentes de datos para {symbol}")
        return None
    
    def run_production_analysis(self):
        """üè≠ Ejecutar an√°lisis de producci√≥n con datos reales"""
        
        if not self.data_sources['production_ready']:
            print("‚ùå SISTEMA NO LISTO PARA PRODUCCI√ìN")
            print("üõ†Ô∏è Configure fuentes de datos reales antes de continuar")
            print("üìã NOTA DE PRODUCCI√ìN: Se requiere al menos una fuente de datos real")
            return self.show_production_requirements()
        
        print("üè≠ ICT ENGINE v6.0 - AN√ÅLISIS DE PRODUCCI√ìN CON DATOS REALES")
        print("üïí Timestamp:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        print("=" * 65)
        
        # Inicializar componentes
        print("üöÄ INICIALIZANDO COMPONENTES DE PRODUCCI√ìN...")
        
        try:
            # Usar ImportManager para imports seguros
            from import_manager import get_pattern_detector, get_smart_money_analyzer
            
            # Cargar componentes usando el gestor de imports
            print("   üì¶ Cargando ICTPatternDetector...")
            ICTPatternDetector = get_pattern_detector()
            if ICTPatternDetector is None:
                raise ImportError("No se pudo cargar ICTPatternDetector")
            
            print("   üì¶ Cargando SmartMoneyAnalyzer...")
            SmartMoneyAnalyzer = get_smart_money_analyzer()
            if SmartMoneyAnalyzer is None:
                raise ImportError("No se pudo cargar SmartMoneyAnalyzer")
            
            # Crear detectores
            detector_config = {'production_mode': True, 'real_data_only': True}
            pattern_detector = ICTPatternDetector(detector_config)
            smart_money = SmartMoneyAnalyzer()
            
            print("‚úÖ Componentes de producci√≥n inicializados")
            
        except Exception as e:
            print(f"‚ùå Error inicializando componentes: {e}")
            print("üìã NOTA DE PRODUCCI√ìN: Verificar configuraci√≥n de m√≥dulos")
            return
        
        # S√≠mbolos para an√°lisis de producci√≥n
        symbols = ["EURUSD", "GBPUSD", "USDJPY", "XAUUSD"]
        timeframes = ["M15", "H1", "H4"]
        
        results = {}
        total_analysis_success = 0
        production_notes = []
        
        for symbol in symbols:
            print(f"\nüéØ ANALIZANDO {symbol} (DATOS REALES DE PRODUCCI√ìN)")
            print("-" * 45)
            
            symbol_results = {}
            
            for timeframe in timeframes:
                print(f"\nüìà {symbol} {timeframe}...")
                
                # Obtener datos reales
                print(f"   üì° Obteniendo datos reales de producci√≥n...")
                real_data = self.get_real_market_data(symbol, timeframe)
                
                if real_data is not None and len(real_data) > 20:
                    current_price = real_data['close'].iloc[-1]
                    data_points = len(real_data)
                    total_analysis_success += 1
                    
                    # Informaci√≥n de la fuente
                    data_source = real_data['data_source'].iloc[0] if 'data_source' in real_data.columns else 'UNKNOWN'
                    is_professional = 'MT5_PROFESSIONAL' in data_source
                    
                    print(f"   ‚úÖ Datos reales obtenidos:")
                    print(f"      üìä Velas: {data_points}")
                    print(f"      üí∞ Precio actual: {current_price:.5f}")
                    print(f"      üè≠ Fuente: {data_source}")
                    print(f"      üèÜ Profesional: {'‚úÖ' if is_professional else 'üì°'}")
                    
                    # Ejecutar detecci√≥n de patrones
                    print(f"   üîç Detectando patrones ICT en producci√≥n...")
                    start_time = time.time()
                    
                    try:
                        patterns = pattern_detector.detect_patterns(real_data, timeframe=timeframe)
                        analysis_time = time.time() - start_time
                        
                        print(f"   ‚úÖ {len(patterns)} patterns detectados en {analysis_time:.3f}s")
                        
                        # An√°lisis Smart Money
                        print(f"   üß† An√°lisis Smart Money en producci√≥n...")
                        timeframes_data = {timeframe: real_data}
                        sm_analysis = smart_money.analyze_smart_money_concepts(symbol, timeframes_data)
                        
                        # Guardar datos de producci√≥n
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        
                        # Guardar velas reales en 04-DATA
                        candles_file = data_path / "candles" / f"{symbol}_{timeframe}_PRODUCTION_{timestamp}.csv"
                        real_data.to_csv(candles_file, index=True)
                        
                        # Guardar an√°lisis en 04-DATA
                        analysis_file = data_path / "reports" / "production" / f"production_analysis_{symbol}_{timeframe}_{timestamp}.json"
                        analysis_file.parent.mkdir(parents=True, exist_ok=True)
                        
                        analysis_report = {
                            'system_type': 'PRODUCTION_REAL_DATA_ONLY',
                            'symbol': symbol,
                            'timeframe': timeframe,
                            'timestamp': timestamp,
                            'analysis_date': datetime.now().isoformat(),
                            'data_source': data_source,
                            'is_professional_data': is_professional,
                            'current_price': current_price,
                            'data_points': data_points,
                            'patterns_detected': len(patterns),
                            'smart_money_analysis': sm_analysis,
                            'production_notes': {
                                'data_quality': 'PROFESSIONAL' if is_professional else 'RETAIL',
                                'real_time_capability': True,
                                'synthetic_data_used': False,
                                'production_ready': True
                            }
                        }
                        
                        with open(analysis_file, 'w') as f:
                            json.dump(analysis_report, f, indent=2, default=str)
                        
                        print(f"   üíæ An√°lisis de producci√≥n guardado: {analysis_file.name}")
                        
                        symbol_results[timeframe] = {
                            'success': True,
                            'data_source': data_source,
                            'patterns_detected': len(patterns),
                            'current_price': current_price,
                            'is_professional': is_professional
                        }
                        
                    except Exception as e:
                        print(f"   ‚ùå Error en an√°lisis de producci√≥n: {e}")
                        production_notes.append(f"Error en an√°lisis {symbol} {timeframe}: {e}")
                        symbol_results[timeframe] = {'error': str(e), 'success': False}
                
                else:
                    print(f"   ‚ùå No se pudieron obtener datos reales para {symbol} {timeframe}")
                    note = f"NOTA DE PRODUCCI√ìN: Configurar fuente de datos para {symbol} {timeframe}"
                    print(f"   üìã {note}")
                    production_notes.append(note)
                    symbol_results[timeframe] = {
                        'error': 'No real data available',
                        'success': False,
                        'production_note': note
                    }
            
            results[symbol] = symbol_results
        
        # Generar reporte final de producci√≥n
        self.generate_production_report(results, total_analysis_success, production_notes)
        return results
    
    def generate_production_report(self, results, success_count, production_notes):
        """üìã Generar reporte final de producci√≥n"""
        print(f"\nüìã REPORTE FINAL - SISTEMA DE PRODUCCI√ìN")
        print("=" * 50)
        
        total_symbols = len(results)
        total_patterns = sum(
            tf.get('patterns_detected', 0) 
            for symbol_data in results.values() 
            for tf in symbol_data.values() 
            if isinstance(tf, dict) and tf.get('success', False)
        )
        
        mt5_count = sum(
            1 for symbol_data in results.values() 
            for tf in symbol_data.values() 
            if isinstance(tf, dict) and 'MT5_PROFESSIONAL' in str(tf.get('data_source', ''))
        )
        
        yahoo_count = sum(
            1 for symbol_data in results.values() 
            for tf in symbol_data.values() 
            if isinstance(tf, dict) and 'YAHOO_FINANCE' in str(tf.get('data_source', ''))
        )
        
        print(f"   üéØ S√≠mbolos configurados: {total_symbols}")
        print(f"   ‚úÖ An√°lisis exitosos: {success_count}")
        print(f"   üîç Patterns detectados: {total_patterns}")
        print(f"   üèÜ Datos MT5 Professional: {mt5_count}")
        print(f"   üì° Datos Yahoo Finance: {yahoo_count}")
        print(f"   üè≠ Modo: PRODUCCI√ìN (Solo datos reales)")
        print(f"   üïí Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        if production_notes:
            print(f"\nüìã NOTAS DE PRODUCCI√ìN:")
            for i, note in enumerate(production_notes[:5], 1):
                print(f"   {i}. {note}")
        
        # Guardar reporte de producci√≥n en 04-DATA
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        production_report = {
            'system_mode': 'PRODUCTION_REAL_DATA_ONLY',
            'timestamp': datetime.now().isoformat(),
            'summary': {
                'total_symbols': total_symbols,
                'successful_analysis': success_count,
                'total_patterns': total_patterns,
                'mt5_sources': mt5_count,
                'yahoo_sources': yahoo_count,
                'synthetic_data_used': False
            },
            'data_sources_status': self.data_sources,
            'production_notes': production_notes,
            'compliance': {
                'real_data_only': True,
                'no_synthetic_data': True,
                'production_ready': self.data_sources['production_ready']
            },
            'results': results
        }
        
        report_file = data_path / "reports" / f"production_system_report_{timestamp}.json"
        with open(report_file, 'w') as f:
            json.dump(production_report, f, indent=2, default=str)
        
        print(f"\nüíæ Reporte de producci√≥n guardado: {report_file.name}")
        
        if success_count == 0:
            print(f"\n‚ö†Ô∏è SISTEMA REQUIERE CONFIGURACI√ìN DE PRODUCCI√ìN")
            print(f"üõ†Ô∏è Configure al menos una fuente de datos reales")
            print(f"üìã NOTA: Este sistema no utiliza datos sint√©ticos")
        else:
            print(f"\n‚úÖ SISTEMA DE PRODUCCI√ìN OPERACIONAL")
    
    def show_production_requirements(self):
        """üìã Mostrar requisitos de producci√≥n"""
        print("\nüìã REQUISITOS DE PRODUCCI√ìN - ICT ENGINE v6.0")
        print("=" * 55)
        print("üè≠ SISTEMA DISE√ëADO EXCLUSIVAMENTE PARA DATOS REALES")
        print()
        print("üèÜ FUENTES DE DATOS REALES REQUERIDAS:")
        print()
        print("1. üèÜ MetaTrader 5 Professional (RECOMENDADO)")
        print("   ‚Ä¢ pip install MetaTrader5")
        print("   ‚Ä¢ Requiere cuenta de broker MT5")
        print("   ‚Ä¢ Datos en tiempo real de alta calidad")
        print("   ‚Ä¢ Spreads reales del broker")
        print()
        print("2. üì° Yahoo Finance (FALLBACK)")
        print("   ‚Ä¢ pip install yfinance")
        print("   ‚Ä¢ Datos hist√≥ricos gratuitos")
        print("   ‚Ä¢ Limitaciones en tiempo real")
        print("   ‚Ä¢ Suitable para backtesting")
        print()
        print("‚ö†Ô∏è NOTAS IMPORTANTES DE PRODUCCI√ìN:")
        print("   ‚Ä¢ Este sistema NO utiliza datos sint√©ticos")
        print("   ‚Ä¢ Dise√±ado exclusivamente para producci√≥n")
        print("   ‚Ä¢ Requiere al menos una fuente de datos real")
        print("   ‚Ä¢ Todos los an√°lisis se basan en datos de mercado")
        print()
        print("üõ†Ô∏è COMANDOS DE INSTALACI√ìN:")
        print("   pip install MetaTrader5 yfinance")
        print()
        print("üìã NOTA DE PRODUCCI√ìN:")
        print("   Configure fuentes de datos antes de ejecutar an√°lisis")
        print()
    
    def install_data_sources(self):
        """üõ†Ô∏è Asistente para instalar fuentes de datos"""
        print("\nüõ†Ô∏è INSTALANDO FUENTES DE DATOS PARA PRODUCCI√ìN...")
        print("=" * 55)
        
        try:
            print("üì¶ Instalando yfinance...")
            subprocess.run([sys.executable, "-m", "pip", "install", "yfinance"], check=True)
            print("‚úÖ yfinance instalado exitosamente")
        except Exception as e:
            print(f"‚ùå Error instalando yfinance: {e}")
        
        try:
            print("üì¶ Instalando MetaTrader5...")
            subprocess.run([sys.executable, "-m", "pip", "install", "MetaTrader5"], check=True)
            print("‚úÖ MetaTrader5 instalado exitosamente")
        except Exception as e:
            print(f"‚ùå Error instalando MetaTrader5: {e}")
        
        print("\nüîÑ Reiniciando verificaci√≥n de fuentes de datos...")
        self.data_sources = self.check_real_data_sources()
    
    def run_dashboard_only(self):
        """üìä Ejecutar solo el dashboard con datos reales"""
        if not self.data_sources['production_ready']:
            print("‚ùå Dashboard requiere fuentes de datos reales configuradas")
            print("üìã NOTA DE PRODUCCI√ìN: Configure fuentes antes de ejecutar dashboard")
            return self.show_production_requirements()
        
        try:
            print("üìä Iniciando Dashboard de Producci√≥n...")
            print("üè≠ Dashboard configurado para datos reales √∫nicamente")
            
            dashboard_script = dashboard_path / "start_dashboard.py"
            
            if dashboard_script.exists():
                result = subprocess.run([
                    sys.executable, str(dashboard_script)
                ], cwd=str(dashboard_path))
                print("‚úÖ Dashboard finalizado")
            else:
                print("‚ùå No se encontr√≥ start_dashboard.py")
                print("üìã NOTA DE PRODUCCI√ìN: Verificar configuraci√≥n del dashboard")
            
        except KeyboardInterrupt:
            print("\nüëã Dashboard detenido por el usuario")
        except Exception as e:
            print(f"‚ùå Error ejecutando Dashboard: {e}")
    
    def run_silver_bullet_dashboard(self):
        """üéØ Ejecutar Silver Bullet Enterprise Dashboard directamente"""
        print("\nüéØ INICIANDO SILVER BULLET ENTERPRISE DASHBOARD")
        print("="*60)
        print("üöÄ Cargando m√≥dulo Silver Bullet...")
        
        try:
            # Crear script temporal para Silver Bullet
            silver_bullet_script = dashboard_path / "launch_silver_bullet.py"
            
            script_content = '''#!/usr/bin/env python3
"""Silver Bullet Enterprise Launcher"""
import sys
from pathlib import Path

# Configurar rutas
dashboard_root = Path(__file__).parent
project_root = dashboard_root.parent
sys.path.insert(0, str(project_root / "01-CORE"))
sys.path.insert(0, str(dashboard_root))
sys.path.insert(0, str(dashboard_root / "core"))
sys.path.insert(0, str(dashboard_root / "data"))
sys.path.insert(0, str(dashboard_root / "widgets"))

try:
    from core.dashboard_engine import DashboardEngine
    from data.data_collector import RealICTDataCollector  
    from widgets.main_interface import MainDashboardInterface
    
    config = {
        'symbols': ['EURUSD', 'GBPUSD', 'XAUUSD', 'USDJPY'],
        'timeframes': ['M15', 'H1', 'H4'],
        'update_interval': 2.0,
        'theme': 'silver_bullet_enterprise',
        'enable_alerts': True,
        'auto_refresh': True,
        'show_debug': True,
        'data_source': 'live',
        'layout_mode': 'tabbed',
        'silver_bullet_enabled': True,
        'live_trading_controls': True
    }
    
    engine = DashboardEngine(config)
    data_collector = RealICTDataCollector(config)
    interface = MainDashboardInterface(config)
    
    print("üéØ Silver Bullet Enterprise Dashboard iniciado")
    interface.run(engine, data_collector)
    
except Exception as e:
    print(f"Error: {e}")
    import traceback
    traceback.print_exc()
'''
            
            # Escribir script temporal
            with open(silver_bullet_script, 'w', encoding='utf-8') as f:
                f.write(script_content)
            
            print("‚úÖ Script Silver Bullet creado")
            print("üöÄ Lanzando Silver Bullet Enterprise...")
            
            # Ejecutar Silver Bullet
            result = subprocess.run([
                sys.executable, str(silver_bullet_script)
            ], cwd=str(dashboard_path))
            
            # Limpiar script temporal
            if silver_bullet_script.exists():
                silver_bullet_script.unlink()
            
            print("‚úÖ Silver Bullet Dashboard finalizado")
            
        except ImportError as e:
            print(f"‚ùå Error importando componentes: {e}")
            print("üí° Ejecutando dashboard alternativo...")
            self.run_dashboard_only()
        except KeyboardInterrupt:
            print("\nüëã Silver Bullet Dashboard detenido por el usuario")
        except Exception as e:
            print(f"‚ùå Error en Silver Bullet Dashboard: {e}")
            print("üí° Intentando ejecutar dashboard est√°ndar...")
            self.run_dashboard_only()
    
    def run_complete_production_system(self):
        """üè≠ Ejecutar sistema completo de producci√≥n con dashboard"""
        if not self.data_sources['production_ready']:
            print("‚ùå Sistema completo requiere fuentes de datos reales configuradas")
            print("üìã NOTA DE PRODUCCI√ìN: Configure fuentes antes de ejecutar sistema completo")
            return self.show_production_requirements()
        
        try:
            print("üè≠ Iniciando Sistema Completo de Producci√≥n...")
            print("‚öôÔ∏è Preparando an√°lisis con datos reales...")
            print("üìä Preparando Dashboard de producci√≥n...")
            print("üè≠ Modo: Solo datos reales - Sin datos sint√©ticos")
            
            # Funci√≥n para ejecutar el an√°lisis de producci√≥n
            def run_production_engine():
                try:
                    print("‚úÖ Motor de an√°lisis de producci√≥n iniciado")
                    self.run_production_analysis()
                except Exception as e:
                    print(f"‚ö†Ô∏è Error en motor de producci√≥n: {e}")
            
            # Funci√≥n para ejecutar el dashboard
            def run_production_dashboard():
                try:
                    time.sleep(3)  # Esperar a que el an√°lisis se inicie
                    dashboard_script = dashboard_path / "start_dashboard.py"
                    
                    if dashboard_script.exists():
                        subprocess.run([
                            sys.executable, str(dashboard_script)
                        ], cwd=str(dashboard_path))
                        print("‚úÖ Dashboard de producci√≥n finalizado")
                    else:
                        print("‚ùå No se encontr√≥ start_dashboard.py")
                except Exception as e:
                    print(f"‚ö†Ô∏è Error en Dashboard de producci√≥n: {e}")
            
            # Iniciar an√°lisis en hilo separado
            engine_thread = threading.Thread(target=run_production_engine, daemon=True)
            engine_thread.start()
            
            # Iniciar dashboard en hilo principal
            dashboard_thread = threading.Thread(target=run_production_dashboard, daemon=False)
            dashboard_thread.start()
            
            print("\nüè≠ SISTEMA COMPLETO DE PRODUCCI√ìN OPERATIVO")
            print("=" * 55)
            print("‚öôÔ∏è Motor ICT: An√°lisis con datos reales")
            print("üìä Dashboard: Interfaz con datos en vivo")
            print("üèÜ Fuentes: Solo datos reales de mercado")
            print("üö´ Datos sint√©ticos: DESHABILITADOS")
            print("üí° Controles del Dashboard:")
            print("   ‚Ä¢ Teclas 1-5: Cambiar pesta√±as")
            print("   ‚Ä¢ Tecla 'q': Salir")
            print("   ‚Ä¢ Ctrl+C: Salir forzado")
            print("=" * 55)
            
            # Esperar a que termine el dashboard
            dashboard_thread.join()
            
        except KeyboardInterrupt:
            print("\nüëã Sistema de producci√≥n detenido por el usuario")
        except Exception as e:
            print(f"‚ùå Error ejecutando sistema de producci√≥n: {e}")
    
    def verify_system_structure(self):
        """üîç Verificar estructura del sistema y compliance"""
        print("\nüîç VERIFICANDO ESTRUCTURA Y COMPLIANCE DEL SISTEMA")
        print("=" * 60)
        
        compliance_score = 0
        total_checks = 6
        
        # 1. Verificar estructura de directorios
        print("1. üìÅ Verificando estructura de directorios...")
        required_dirs = [data_path, logs_path, core_path, dashboard_path]
        dirs_ok = all(d.exists() for d in required_dirs)
        if dirs_ok:
            print("   ‚úÖ Estructura de directorios correcta")
            compliance_score += 1
        else:
            print("   ‚ùå Estructura de directorios incompleta")
        
        # 2. Verificar fuentes de datos
        print("2. üåê Verificando fuentes de datos reales...")
        if self.data_sources['production_ready']:
            print("   ‚úÖ Fuentes de datos reales configuradas")
            compliance_score += 1
        else:
            print("   ‚ùå Fuentes de datos reales no configuradas")
            print("   üìã NOTA DE PRODUCCI√ìN: Configure fuentes de datos")
        
        # 3. Verificar carpetas DATA y LOGS
        print("3. üìä Verificando carpetas DATA y LOGS...")
        data_dirs = [data_path / "candles", data_path / "reports", logs_path / "application"]
        data_ok = all(d.exists() for d in data_dirs)
        if data_ok:
            print("   ‚úÖ Carpetas DATA y LOGS correctas")
            compliance_score += 1
        else:
            print("   ‚ùå Carpetas DATA y LOGS incompletas")
        
        # 4. Verificar modo de producci√≥n
        print("4. üè≠ Verificando modo de producci√≥n...")
        print("   ‚úÖ Sistema configurado para solo datos reales")
        print("   ‚úÖ Datos sint√©ticos deshabilitados")
        compliance_score += 1
        
        # 5. Verificar componentes core
        print("5. üîß Verificando componentes core...")
        try:
            # Usar ImportManager para verificaci√≥n de componentes
            from import_manager import check_components
            
            components = check_components()
            
            if components.get('pattern_detector', False):
                print("   ‚úÖ Componentes core disponibles")
                compliance_score += 1
            else:
                raise ImportError("No se pudo cargar componentes core")
        except Exception as e:
            print(f"   ‚ùå Error en componentes core: {e}")
            print("   üìã NOTA DE PRODUCCI√ìN: Verificar m√≥dulos core")
        
        # 6. Verificar compliance SIC/SLUC
        print("6. üéØ Verificando compliance SIC/SLUC...")
        sic_sluc_files = [
            data_path / "reports",
            logs_path / "application" 
        ]
        if all(f.exists() for f in sic_sluc_files):
            print("   ‚úÖ Estructura SIC/SLUC conforme")
            compliance_score += 1
        else:
            print("   ‚ùå Estructura SIC/SLUC incompleta")
        
        # Calcular score final
        compliance_percentage = (compliance_score / total_checks) * 100
        
        print(f"\nüìä RESULTADO COMPLIANCE:")
        print(f"   üéØ Score: {compliance_score}/{total_checks} ({compliance_percentage:.1f}%)")
        
        if compliance_percentage >= 80:
            print("   ‚úÖ Sistema listo para producci√≥n")
        elif compliance_percentage >= 60:
            print("   ‚ö†Ô∏è Sistema parcialmente listo - Revisar elementos faltantes")
        else:
            print("   ‚ùå Sistema requiere configuraci√≥n antes de producci√≥n")
            print("   üìã NOTA DE PRODUCCI√ìN: Configure elementos faltantes")
        
        # Guardar reporte en 04-DATA
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        compliance_report = {
            'timestamp': datetime.now().isoformat(),
            'system_type': 'PRODUCTION_REAL_DATA_ONLY',
            'compliance_score': compliance_score,
            'total_checks': total_checks,
            'compliance_percentage': compliance_percentage,
            'data_sources_status': self.data_sources,
            'production_ready': compliance_percentage >= 80,
            'production_notes': [
                "Sistema configurado exclusivamente para datos reales",
                "Datos sint√©ticos deshabilitados por dise√±o",
                "Requiere fuentes de datos configuradas para operaci√≥n"
            ]
        }
        
        report_file = data_path / "reports" / f"compliance_report_{timestamp}.json"
        with open(report_file, 'w') as f:
            json.dump(compliance_report, f, indent=2)
        
        print(f"\nüíæ Reporte guardado: {report_file.name}")
    
    def shutdown(self):
        """Cerrar todos los procesos limpiamente"""
        if not self.is_running:
            return
            
        print("\nüîÑ Cerrando sistema de producci√≥n...")
        self.is_running = False
        self.shutdown_event.set()
        
        try:
            if self.engine_process:
                self.engine_process.terminate()
                print("‚úÖ Motor de an√°lisis cerrado")
                
            if self.dashboard_process:
                self.dashboard_process.terminate()
                print("‚úÖ Dashboard cerrado")
                
            print("‚úÖ Sistema de producci√≥n cerrado exitosamente")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error durante cierre: {e}")
    
    def run(self):
        """Ejecutar sistema principal de producci√≥n"""
        try:
            self.is_running = True
            self.print_banner()
            
            while self.is_running:
                self.print_menu()
                
                try:
                    if self.data_sources['production_ready']:
                        choice = input("\nüéØ Selecciona una opci√≥n (1-8): ").strip()
                        
                        if choice == "1":
                            self.run_production_analysis()
                        elif choice == "2":
                            self.run_dashboard_only()
                        elif choice == "3":
                            self.run_complete_production_system()
                        elif choice == "4":
                            self.run_silver_bullet_dashboard()
                        elif choice == "5":
                            self.verify_system_structure()
                        elif choice == "6":
                            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                            print(f"üìã Generando reporte de estado del sistema...")
                            self.verify_system_structure()
                        elif choice == "7":
                            self.install_data_sources()
                        elif choice == "8":
                            print("\nüëã Saliendo del sistema de producci√≥n...")
                            break
                        else:
                            print("‚ùå Opci√≥n no v√°lida. Intenta de nuevo.")
                            continue
                    else:
                        choice = input("\nüõ†Ô∏è Selecciona una opci√≥n (1-5): ").strip()
                        
                        if choice == "1":
                            self.install_data_sources()
                        elif choice == "2":
                            self.install_data_sources()
                        elif choice == "3":
                            self.verify_system_structure()
                        elif choice == "4":
                            self.show_production_requirements()
                        elif choice == "5":
                            print("\nüëã Saliendo...")
                            break
                        else:
                            print("‚ùå Opci√≥n no v√°lida.")
                            continue
                        
                except KeyboardInterrupt:
                    print("\nüëã Saliendo...")
                    break
                except EOFError:
                    print("\nüëã Saliendo...")
                    break
                    
                # Pausa antes de mostrar el men√∫ de nuevo
                if self.is_running:
                    input("\nüîÑ Presiona Enter para volver al men√∫ principal...")
                    print("\n" + "="*80)
                    
        except Exception as e:
            print(f"‚ùå Error cr√≠tico: {e}")
        finally:
            self.shutdown()

def main():
    """Funci√≥n principal"""
    try:
        # Verificar que las rutas existen
        if not core_path.exists():
            print(f"‚ùå Error: No se encuentra 01-CORE en {core_path}")
            print("üìã NOTA DE PRODUCCI√ìN: Verificar estructura del proyecto")
            sys.exit(1)
        
        # Crear y ejecutar sistema de producci√≥n
        production_system = ICTEngineProductionSystem()
        production_system.run()
        
    except KeyboardInterrupt:
        print("\nüëã Sistema de producci√≥n terminado por el usuario")
    except Exception as e:
        print(f"‚ùå Error fatal: {e}")
        sys.exit(1)

if __name__ == "__main__":
    # Verificar argumentos de l√≠nea de comandos
    if len(sys.argv) > 1 and sys.argv[1] == "--multi-symbol-testing":
        # Ejecutar testing multi-s√≠mbolo extensivo usando run_complete_system.py
        print("üß™ EJECUTANDO TESTING MULTI-S√çMBOLO EXTENSIVO - OPCI√ìN A")
        print("=" * 60)
        print("üîß Delegando a run_complete_system.py para testing especializado...")
        
        try:
            import run_complete_system
            exit_code = run_complete_system.main()
            sys.exit(exit_code)
        except Exception as e:
            print(f"‚ùå Error ejecutando testing multi-s√≠mbolo: {e}")
            sys.exit(1)
    else:
        # Ejecutar sistema normal
        main()
